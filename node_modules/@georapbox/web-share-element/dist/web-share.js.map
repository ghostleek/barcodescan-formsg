{"mappings":"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","sources":["<anon>","src/web-share.js"],"sourcesContent":["// @ts-check\n/**\n * Represents a value that may be of type T, or null.\n *\n * @template T\n * @typedef {T | null} Nullable\n */ /**\n * Represents the data to share.\n *\n * @typedef {Object} ShareData\n * @property {string} [url] - The URL to share.\n * @property {string} [title] - The title to share.\n * @property {string} [text] - The text to share.\n * @property {File[]} [files] - The files to share.\n */ const $e179325634270afd$var$styles = /* css */ `\n  :host {\n    display: inline-block;\n  }\n`;\nconst $e179325634270afd$var$template = document.createElement(\"template\");\n$e179325634270afd$var$template.innerHTML = /* html */ `\n  <style>${$e179325634270afd$var$styles}</style>\n  <slot name=\"button\"><button type=\"button\" part=\"button\"><slot name=\"button-content\">Share</slot></button></slot>\n`;\n/**\n * @summary A custom element that provides a button to share content.\n * @documentation https://github.com/georapbox/web-share-element\n *\n * @tagname web-share - This is the default tag name, unless overridden by the `defineCustomElement` method.\n *\n * @property {boolean} disabled - Indicates whether the button is disabled.\n * @property {string} shareUrl - The URL to share.\n * @property {string} shareTitle - The title to share.\n * @property {string} shareText - The text to share.\n * @property {File[]} shareFiles - The files to share.\n *\n * @attribute {boolean} disabled - Reflects the disabled property.\n * @attribute {string} share-url - Reflects the shareUrl property.\n * @attribute {string} share-title - Reflects the shareTitle property.\n * @attribute {string} share-text - Reflects the shareText property.\n *\n * @slot button - The button to share content.\n * @slot button-content - The content of the button to share content.\n *\n * @csspart button - The button to share content.\n * @csspart button--disabled - The button to share content when disabled.\n *\n * @event web-share:success - Fired when the share operation is successful.\n * @event web-share:abort - Fired when the share operation is aborted.\n * @event web-share:error - Fired when the share operation fails.\n *\n * @method defineCustomElement - Static method. Defines the custom element with the given name.\n * @method share - Instance method. Shares the shareable data taken from the element's properties.\n */ class $e179325634270afd$export$30b344bef3e55b67 extends HTMLElement {\n    /** @type {Nullable<HTMLSlotElement>} */ #buttonSlot;\n    /** @type {Nullable<Element>} */ #buttonEl;\n    /** @type {File[]} */ #files = [];\n    constructor(){\n        super();\n        if (!this.shadowRoot) {\n            const shadowRoot = this.attachShadow({\n                mode: \"open\",\n                delegatesFocus: true\n            });\n            shadowRoot.appendChild($e179325634270afd$var$template.content.cloneNode(true));\n        }\n        this.#buttonSlot = this.shadowRoot?.querySelector('slot[name=\"button\"]') || null;\n        this.#buttonEl = this.#getButton();\n    }\n    static get observedAttributes() {\n        return [\n            \"disabled\"\n        ];\n    }\n    /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */ attributeChangedCallback(name, oldValue, newValue) {\n        if (name === \"disabled\" && oldValue !== newValue && this.#buttonEl) {\n            this.#buttonEl.toggleAttribute(\"disabled\", this.disabled);\n            this.#buttonEl.setAttribute(\"aria-disabled\", this.disabled.toString());\n            if (this.#buttonEl.part && this.#buttonEl.part.contains(\"button\")) this.#buttonEl.part.toggle(\"button--disabled\", this.disabled);\n        }\n    }\n    /**\n   * Lifecycle method that is called when the element is added to the DOM.\n   */ connectedCallback() {\n        this.#upgradeProperty(\"shareUrl\");\n        this.#upgradeProperty(\"shareTitle\");\n        this.#upgradeProperty(\"shareText\");\n        this.#upgradeProperty(\"shareFiles\");\n        this.#upgradeProperty(\"disabled\");\n        this.#buttonSlot?.addEventListener(\"slotchange\", this.#handleSlotChange);\n        this.#buttonEl?.addEventListener(\"click\", this.#handleClick);\n    }\n    /**\n   * Lifecycle method that is called when the element is removed from the DOM.\n   */ disconnectedCallback() {\n        this.#buttonSlot?.removeEventListener(\"slotchange\", this.#handleSlotChange);\n        this.#buttonEl?.removeEventListener(\"click\", this.#handleClick);\n    }\n    /**\n   * @type {boolean} - Indicates whether the button is disabled.\n   * @default false\n   * @attribute disabled - Reflects the disabled property.\n   */ get disabled() {\n        return this.hasAttribute(\"disabled\");\n    }\n    set disabled(value) {\n        this.toggleAttribute(\"disabled\", !!value);\n    }\n    /**\n   * @type {string} - The URL to share.\n   * @attribute share-url - Reflects the shareUrl property.\n   */ get shareUrl() {\n        return this.getAttribute(\"share-url\") || \"\";\n    }\n    set shareUrl(value) {\n        this.setAttribute(\"share-url\", value);\n    }\n    /**\n   * @type {string} - The title to share.\n   * @attribute share-title - Reflects the shareTitle property.\n   */ get shareTitle() {\n        return this.getAttribute(\"share-title\") || \"\";\n    }\n    set shareTitle(value) {\n        this.setAttribute(\"share-title\", value);\n    }\n    /**\n   * @type {string} - The text to share.\n   * @attribute share-text - Reflects the shareText property.\n   */ get shareText() {\n        return this.getAttribute(\"share-text\") || \"\";\n    }\n    set shareText(value) {\n        this.setAttribute(\"share-text\", value);\n    }\n    /**\n   * @type {File[]} - The files to share.\n   */ get shareFiles() {\n        return this.#files;\n    }\n    set shareFiles(value) {\n        if (Array.isArray(value) && value.length > 0) this.#files = value;\n    }\n    /**\n   * Shares the shareable data taken from the element's properties.\n   *\n   * @returns {Promise<void>} - A promise that resolves when the share operation is complete.\n   */ async share() {\n        if (this.disabled) return;\n        try {\n            /** @type {ShareData} */ const shareData = {};\n            if (this.shareUrl) shareData.url = this.shareUrl;\n            if (this.shareTitle) shareData.title = this.shareTitle;\n            if (this.shareText) shareData.text = this.shareText;\n            if (Array.isArray(this.shareFiles) && this.shareFiles.length > 0 && navigator.canShare && navigator.canShare({\n                files: this.shareFiles\n            })) shareData.files = this.shareFiles;\n            await navigator.share(shareData);\n            this.dispatchEvent(new CustomEvent(\"web-share:success\", {\n                bubbles: true,\n                composed: true,\n                detail: {\n                    shareData: shareData\n                }\n            }));\n        } catch (error) {\n            if (error instanceof Error && error.name === \"AbortError\") {\n                this.dispatchEvent(new CustomEvent(\"web-share:abort\", {\n                    bubbles: true,\n                    composed: true,\n                    detail: {\n                        error: error\n                    }\n                }));\n                return;\n            }\n            this.dispatchEvent(new CustomEvent(\"web-share:error\", {\n                bubbles: true,\n                composed: true,\n                detail: {\n                    error: error\n                }\n            }));\n        }\n    }\n    /**\n   * Handles the click event on the button.\n   *\n   * @param {any} evt - The event object.\n   */ #handleClick = (evt)=>{\n        evt.preventDefault();\n        if (this.disabled) return;\n        this.share();\n    };\n    /**\n   * Handles the slotchange event on the button slot.\n   *\n   * @param {any} evt - The event object.\n   */ #handleSlotChange = (evt)=>{\n        if (evt.target && evt.target.name === \"button\") {\n            this.#buttonEl?.removeEventListener(\"click\", this.#handleClick);\n            this.#buttonEl = this.#getButton();\n            if (this.#buttonEl) {\n                this.#buttonEl.addEventListener(\"click\", this.#handleClick);\n                if (this.#buttonEl.nodeName !== \"BUTTON\" && !this.#buttonEl.hasAttribute(\"role\")) this.#buttonEl.setAttribute(\"role\", \"button\");\n            }\n        }\n    };\n    /**\n   * Returns the button element from the button slot.\n   *\n   * @returns {Nullable<Element>} - The button element.\n   */ #getButton() {\n        if (!this.#buttonSlot) return null;\n        return this.#buttonSlot.assignedElements({\n            flatten: true\n        }).find((el)=>{\n            return el.nodeName === \"BUTTON\" || el.getAttribute(\"slot\") === \"button\";\n        }) || null;\n    }\n    /**\n   * This is to safe guard against cases where, for instance, a framework may have added the element to the page and set a\n   * value on one of its properties, but lazy loaded its definition. Without this guard, the upgraded element would miss that\n   * property and the instance property would prevent the class property setter from ever being called.\n   *\n   * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n   *\n   * @param {'shareUrl' | 'shareTitle' | 'shareText' | 'shareFiles' | 'disabled'} prop - The property name to upgrade.\n   */ #upgradeProperty(prop) {\n        /** @type {any} */ const instance = this;\n        if (Object.prototype.hasOwnProperty.call(instance, prop)) {\n            const value = instance[prop];\n            delete instance[prop];\n            instance[prop] = value;\n        }\n    }\n    static defineCustomElement(elementName = \"web-share\") {\n        if (typeof window !== \"undefined\" && !window.customElements.get(elementName)) window.customElements.define(elementName, $e179325634270afd$export$30b344bef3e55b67);\n    }\n}\n\n\nexport {$e179325634270afd$export$30b344bef3e55b67 as WebShare};\n//# sourceMappingURL=web-share.js.map\n","// @ts-check\n\n/**\n * Represents a value that may be of type T, or null.\n *\n * @template T\n * @typedef {T | null} Nullable\n */\n\n/**\n * Represents the data to share.\n *\n * @typedef {Object} ShareData\n * @property {string} [url] - The URL to share.\n * @property {string} [title] - The title to share.\n * @property {string} [text] - The text to share.\n * @property {File[]} [files] - The files to share.\n */\n\nconst styles = /* css */`\n  :host {\n    display: inline-block;\n  }\n`;\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = /* html */ `\n  <style>${styles}</style>\n  <slot name=\"button\"><button type=\"button\" part=\"button\"><slot name=\"button-content\">Share</slot></button></slot>\n`;\n\n/**\n * @summary A custom element that provides a button to share content.\n * @documentation https://github.com/georapbox/web-share-element\n *\n * @tagname web-share - This is the default tag name, unless overridden by the `defineCustomElement` method.\n *\n * @property {boolean} disabled - Indicates whether the button is disabled.\n * @property {string} shareUrl - The URL to share.\n * @property {string} shareTitle - The title to share.\n * @property {string} shareText - The text to share.\n * @property {File[]} shareFiles - The files to share.\n *\n * @attribute {boolean} disabled - Reflects the disabled property.\n * @attribute {string} share-url - Reflects the shareUrl property.\n * @attribute {string} share-title - Reflects the shareTitle property.\n * @attribute {string} share-text - Reflects the shareText property.\n *\n * @slot button - The button to share content.\n * @slot button-content - The content of the button to share content.\n *\n * @csspart button - The button to share content.\n * @csspart button--disabled - The button to share content when disabled.\n *\n * @event web-share:success - Fired when the share operation is successful.\n * @event web-share:abort - Fired when the share operation is aborted.\n * @event web-share:error - Fired when the share operation fails.\n *\n * @method defineCustomElement - Static method. Defines the custom element with the given name.\n * @method share - Instance method. Shares the shareable data taken from the element's properties.\n */\nclass WebShare extends HTMLElement {\n  /** @type {Nullable<HTMLSlotElement>} */\n  #buttonSlot;\n\n  /** @type {Nullable<Element>} */\n  #buttonEl;\n\n  /** @type {File[]} */\n  #files = [];\n\n  constructor() {\n    super();\n\n    if (!this.shadowRoot) {\n      const shadowRoot = this.attachShadow({ mode: 'open', delegatesFocus: true });\n      shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    this.#buttonSlot = this.shadowRoot?.querySelector('slot[name=\"button\"]') || null;\n    this.#buttonEl = this.#getButton();\n  }\n\n  static get observedAttributes() {\n    return ['disabled'];\n  }\n\n  /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'disabled' && oldValue !== newValue && this.#buttonEl) {\n      this.#buttonEl.toggleAttribute('disabled', this.disabled);\n      this.#buttonEl.setAttribute('aria-disabled', this.disabled.toString());\n\n      if (this.#buttonEl.part && this.#buttonEl.part.contains('button')) {\n        this.#buttonEl.part.toggle('button--disabled', this.disabled);\n      }\n    }\n  }\n\n  /**\n   * Lifecycle method that is called when the element is added to the DOM.\n   */\n  connectedCallback() {\n    this.#upgradeProperty('shareUrl');\n    this.#upgradeProperty('shareTitle');\n    this.#upgradeProperty('shareText');\n    this.#upgradeProperty('shareFiles');\n    this.#upgradeProperty('disabled');\n\n    this.#buttonSlot?.addEventListener('slotchange', this.#handleSlotChange);\n    this.#buttonEl?.addEventListener('click', this.#handleClick);\n  }\n\n  /**\n   * Lifecycle method that is called when the element is removed from the DOM.\n   */\n  disconnectedCallback() {\n    this.#buttonSlot?.removeEventListener('slotchange', this.#handleSlotChange);\n    this.#buttonEl?.removeEventListener('click', this.#handleClick);\n  }\n\n  /**\n   * @type {boolean} - Indicates whether the button is disabled.\n   * @default false\n   * @attribute disabled - Reflects the disabled property.\n   */\n  get disabled() {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value) {\n    this.toggleAttribute('disabled', !!value);\n  }\n\n  /**\n   * @type {string} - The URL to share.\n   * @attribute share-url - Reflects the shareUrl property.\n   */\n  get shareUrl() {\n    return this.getAttribute('share-url') || '';\n  }\n\n  set shareUrl(value) {\n    this.setAttribute('share-url', value);\n  }\n\n  /**\n   * @type {string} - The title to share.\n   * @attribute share-title - Reflects the shareTitle property.\n   */\n  get shareTitle() {\n    return this.getAttribute('share-title') || '';\n  }\n\n  set shareTitle(value) {\n    this.setAttribute('share-title', value);\n  }\n\n  /**\n   * @type {string} - The text to share.\n   * @attribute share-text - Reflects the shareText property.\n   */\n  get shareText() {\n    return this.getAttribute('share-text') || '';\n  }\n\n  set shareText(value) {\n    this.setAttribute('share-text', value);\n  }\n\n  /**\n   * @type {File[]} - The files to share.\n   */\n  get shareFiles() {\n    return this.#files;\n  }\n\n  set shareFiles(value) {\n    if (Array.isArray(value) && value.length > 0) {\n      this.#files = value;\n    }\n  }\n\n  /**\n   * Shares the shareable data taken from the element's properties.\n   *\n   * @returns {Promise<void>} - A promise that resolves when the share operation is complete.\n   */\n  async share() {\n    if (this.disabled) {\n      return;\n    }\n\n    try {\n      /** @type {ShareData} */\n      const shareData = {};\n\n      if (this.shareUrl) {\n        shareData.url = this.shareUrl;\n      }\n\n      if (this.shareTitle) {\n        shareData.title = this.shareTitle;\n      }\n\n      if (this.shareText) {\n        shareData.text = this.shareText;\n      }\n\n      if (\n        Array.isArray(this.shareFiles)\n        && this.shareFiles.length > 0\n        && navigator.canShare\n        && navigator.canShare({ files: this.shareFiles })\n      ) {\n        shareData.files = this.shareFiles;\n      }\n\n      await navigator.share(shareData);\n\n      this.dispatchEvent(new CustomEvent('web-share:success', {\n        bubbles: true,\n        composed: true,\n        detail: { shareData }\n      }));\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        this.dispatchEvent(new CustomEvent('web-share:abort', {\n          bubbles: true,\n          composed: true,\n          detail: { error }\n        }));\n\n        return;\n      }\n\n      this.dispatchEvent(new CustomEvent('web-share:error', {\n        bubbles: true,\n        composed: true,\n        detail: { error }\n      }));\n    }\n  }\n\n  /**\n   * Handles the click event on the button.\n   *\n   * @param {any} evt - The event object.\n   */\n  #handleClick = evt => {\n    evt.preventDefault();\n\n    if (this.disabled) {\n      return;\n    }\n\n    this.share();\n  };\n\n  /**\n   * Handles the slotchange event on the button slot.\n   *\n   * @param {any} evt - The event object.\n   */\n  #handleSlotChange = evt => {\n    if (evt.target && evt.target.name === 'button') {\n      this.#buttonEl?.removeEventListener('click', this.#handleClick);\n      this.#buttonEl = this.#getButton();\n\n      if (this.#buttonEl) {\n        this.#buttonEl.addEventListener('click', this.#handleClick);\n\n        if (this.#buttonEl.nodeName !== 'BUTTON' && !this.#buttonEl.hasAttribute('role')) {\n          this.#buttonEl.setAttribute('role', 'button');\n        }\n      }\n    }\n  };\n\n  /**\n   * Returns the button element from the button slot.\n   *\n   * @returns {Nullable<Element>} - The button element.\n   */\n  #getButton() {\n    if (!this.#buttonSlot) {\n      return null;\n    }\n\n    return this.#buttonSlot.assignedElements({ flatten: true }).find(el => {\n      return el.nodeName === 'BUTTON' || el.getAttribute('slot') === 'button';\n    }) || null;\n  }\n\n  /**\n   * This is to safe guard against cases where, for instance, a framework may have added the element to the page and set a\n   * value on one of its properties, but lazy loaded its definition. Without this guard, the upgraded element would miss that\n   * property and the instance property would prevent the class property setter from ever being called.\n   *\n   * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n   *\n   * @param {'shareUrl' | 'shareTitle' | 'shareText' | 'shareFiles' | 'disabled'} prop - The property name to upgrade.\n   */\n  #upgradeProperty(prop) {\n    /** @type {any} */\n    const instance = this;\n\n    if (Object.prototype.hasOwnProperty.call(instance, prop)) {\n      const value = instance[prop];\n      delete instance[prop];\n      instance[prop] = value;\n    }\n  }\n\n  static defineCustomElement(elementName = 'web-share') {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, WebShare);\n    }\n  }\n}\n\nexport { WebShare };\n"],"names":["$e179325634270afd$var$styles","$e179325634270afd$var$template","document","createElement","innerHTML","$e179325634270afd$export$30b344bef3e55b67","HTMLElement","buttonSlot","buttonEl","files","constructor","shadowRoot","attachShadow","mode","delegatesFocus","appendChild","content","cloneNode","querySelector","getButton","observedAttributes","attributeChangedCallback","name","oldValue","newValue","toggleAttribute","disabled","setAttribute","toString","part","contains","toggle","connectedCallback","upgradeProperty","addEventListener","handleSlotChange","handleClick","disconnectedCallback","removeEventListener","hasAttribute","value","shareUrl","getAttribute","shareTitle","shareText","shareFiles","Array","isArray","length","share","shareData","url","title","text","navigator","canShare","dispatchEvent","CustomEvent","bubbles","composed","detail","error","Error","evt","preventDefault","target","nodeName","assignedElements","flatten","find","el","prop","Object","prototype","hasOwnProperty","call","instance","defineCustomElement","elementName","window","customElements","get","define","WebShare"],"version":3,"file":"web-share.js.map"}