{"mappings":"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","sources":["<anon>","src/a-tab-group.js","src/a-tab.js","src/utils/uid.js","src/utils/upgrade-property.js","src/a-tab-panel.js"],"sourcesContent":["// @ts-check\n/**\n * Represents a value that may be of type T, or null.\n *\n * @template T\n * @typedef {T | null} Nullable\n */ /** @typedef {import('./a-tab').ATab} Tab */ /** @typedef {import('./a-tab-panel').ATabPanel} TabPanel */ // @ts-check\n// @ts-check\n/**\n * Generates a unique id of the form `${prefix}-${randomString}-${suffix}`.\n *\n * @param {string} [prefix=''] - The prefix to use for the id.\n * @param {string} [suffix=''] - The suffix to use for the id.\n * @returns {string} - The unique id.\n */ const $aa07eeb3067ea186$export$e2a22331486dcca0 = (prefix = \"\", suffix = \"\")=>{\n    const prefixString = typeof prefix === \"string\" && prefix !== \"\" ? prefix + \"-\" : \"\";\n    const suffixString = typeof suffix === \"string\" && suffix !== \"\" ? \"-\" + suffix : \"\";\n    const randomString = Math.random().toString(36).substring(2, 8); // Pseudo-random string of six alphanumeric characters.\n    return `${prefixString}${randomString}${suffixString}`;\n};\n\n\n// @ts-check\n/**\n * This is to safe guard against cases where, for instance, a framework may have added the element to the page and set a\n * value on one of its properties, but lazy loaded its definition. Without this guard, the upgraded element would miss that\n * property and the instance property would prevent the class property setter from ever being called.\n *\n * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n *\n * @param {string} prop - The property to upgrade.\n * @param {any} instance - The instance of the tab.\n */ const $2b7397b7d9d03d51$export$f7b23927dede22b3 = (prop, instance)=>{\n    if (Object.prototype.hasOwnProperty.call(instance, prop)) {\n        const value = instance[prop];\n        delete instance[prop];\n        instance[prop] = value;\n    }\n};\n\n\nlet $4b127c96b8d62b28$var$tabCounter = 0;\nconst $4b127c96b8d62b28$var$styles = /* css */ `\n  :host {\n    box-sizing: border-box;\n    display: inline-block;\n    contain: content;\n  }\n\n  :host([hidden]),\n  [hidden] {\n    display: none !important;\n  }\n\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: inherit;\n  }\n\n  .tab {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    width: 100%;\n    padding: 0.375rem 0.75rem;\n    white-space: nowrap;\n    cursor: pointer;\n  }\n\n  :host([disabled]) .tab {\n    opacity: 0.7;\n    cursor: not-allowed;\n  }\n\n  :host([selected]) .tab {\n    color: var(--selected-tab-color);\n    background-color: var(--selected-tab-bg-color);\n  }\n\n  .tab__close {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0.25rem;\n    font-size: inherit;\n    cursor: pointer;\n  }\n`;\nconst $4b127c96b8d62b28$var$template = document.createElement(\"template\");\n$4b127c96b8d62b28$var$template.innerHTML = /* html */ `\n  <style>\n    ${$4b127c96b8d62b28$var$styles}\n  </style>\n\n  <div part=\"base\" class=\"tab\">\n    <slot></slot>\n  </div>\n`;\n/**\n * @summary\n * This is a tab for a <a-tab-group> tab panel.\n * `<a-tab>` should always be used with `role=heading` in the markup so that the semantics remain useable when JavaScript is failing.\n * @documentation https://github.com/georapbox/a-tab-group\n *\n * @tagname a-tab\n * @extends HTMLElement\n *\n * @property {boolean} selected - Whether the tab is selected.\n * @property {boolean} disabled - Whether the tab is disabled.\n * @property {boolean} closable - Whether the tab is closable.\n *\n * @attribute selected - Reflects the selected property.\n * @attribute disabled - Reflects the disabled property.\n * @attribute closable - Reflects the closable property.\n *\n * @csspart base - The component's base wrapper.\n * @csspart close-tab - The close button.\n * @csspart close-tab-icon - The close button icon.\n *\n * @slot - The tab's content.\n *\n * @event a-tab-close - Fires when the tab's close button is clicked.\n */ class $4b127c96b8d62b28$export$6824c350c20eab3a extends HTMLElement {\n    constructor(){\n        super();\n        if (!this.shadowRoot) {\n            const shadowRoot = this.attachShadow({\n                mode: \"open\"\n            });\n            shadowRoot.appendChild($4b127c96b8d62b28$var$template.content.cloneNode(true));\n        }\n    }\n    static get observedAttributes() {\n        return [\n            \"selected\",\n            \"disabled\",\n            \"closable\"\n        ];\n    }\n    /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */ attributeChangedCallback(name, oldValue, newValue) {\n        if (name === \"selected\" && oldValue !== newValue) this.setAttribute(\"aria-selected\", this.selected.toString());\n        if (name === \"disabled\" && oldValue !== newValue) {\n            this.setAttribute(\"aria-disabled\", this.disabled.toString());\n            this.setAttribute(\"tabindex\", this.disabled ? \"-1\" : \"0\");\n        }\n        if (name === \"closable\" && oldValue !== newValue) {\n            if (this.closable) {\n                const closeButton = document.createElement(\"span\");\n                closeButton.className = \"tab__close\";\n                closeButton.setAttribute(\"part\", \"close-tab\");\n                closeButton.innerHTML = /* html */ `<svg part=\"close-tab-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.875em\" height=\"0.875em\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z\"/></svg>`;\n                this.shadowRoot?.querySelector(\".tab\")?.appendChild(closeButton);\n                closeButton.addEventListener(\"click\", this.#handleCloseButtonClick);\n            } else {\n                const closeButton = this.shadowRoot?.querySelector(\".tab__close\");\n                closeButton?.removeEventListener(\"click\", this.#handleCloseButtonClick);\n                closeButton?.remove();\n            }\n        }\n    }\n    /**\n   * Lifecycle method that is called when the element is first connected to the DOM.\n   */ connectedCallback() {\n        this.#upgradeProperty(\"selected\");\n        this.#upgradeProperty(\"disabled\");\n        this.#upgradeProperty(\"closable\");\n        if (!this.id) this.id = (0, $aa07eeb3067ea186$export$e2a22331486dcca0)(\"tab\", (++$4b127c96b8d62b28$var$tabCounter).toString());\n        this.setAttribute(\"slot\", \"tab\");\n        this.setAttribute(\"role\", \"tab\");\n        this.setAttribute(\"aria-selected\", \"false\");\n        this.setAttribute(\"tabindex\", this.disabled ? \"-1\" : \"0\");\n    }\n    /**\n   * Lifecycle method that is called when the element is disconnected from the DOM.\n   */ disconnectedCallback() {\n        const closeButton = this.shadowRoot?.querySelector(\".tab__close\");\n        closeButton?.removeEventListener(\"click\", this.#handleCloseButtonClick);\n    }\n    /**\n   * @type {boolean} - Whether the tab is selected.\n   * @default false\n   * @attribute selected - Reflects the selected property.\n   */ get selected() {\n        return this.hasAttribute(\"selected\");\n    }\n    set selected(value) {\n        this.toggleAttribute(\"selected\", !!value);\n    }\n    /**\n   * @type {boolean} - Whether the tab is disabled.\n   * @default false\n   * @attribute disabled - Reflects the disabled property.\n   */ get disabled() {\n        return this.hasAttribute(\"disabled\");\n    }\n    set disabled(value) {\n        this.toggleAttribute(\"disabled\", !!value);\n    }\n    /**\n   * @type {boolean} - Whether the tab is closable.\n   * @default false\n   * @attribute closable - Reflects the closable property.\n   */ get closable() {\n        return this.hasAttribute(\"closable\");\n    }\n    set closable(value) {\n        this.toggleAttribute(\"closable\", !!value);\n    }\n    /**\n   * Handles the click event on the close button.\n   *\n   * @param {Event} evt - The click event.\n   */ #handleCloseButtonClick = (evt)=>{\n        evt.stopPropagation();\n        this.dispatchEvent(new CustomEvent(`a-tab-close`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                tabId: this.id\n            }\n        }));\n    };\n    /**\n   * Wrapper for the `upgradeProperty` function.\n   *\n   * @param {'selected' | 'disabled' | 'closable'} prop - The property to upgrade.\n   */ #upgradeProperty(prop) {\n        return (0, $2b7397b7d9d03d51$export$f7b23927dede22b3)(prop, this);\n    }\n    static defineCustomElement(elementName = \"a-tab\") {\n        if (typeof window !== \"undefined\" && !window.customElements.get(elementName)) window.customElements.define(elementName, $4b127c96b8d62b28$export$6824c350c20eab3a);\n    }\n}\n$4b127c96b8d62b28$export$6824c350c20eab3a.defineCustomElement();\n\n\n// @ts-check\n\nlet $17a63ddf0f11756d$var$panelCounter = 0;\nconst $17a63ddf0f11756d$var$styles = /* css */ `\n  :host {\n    box-sizing: border-box;\n    display: block;\n    contain: content;\n  }\n\n  :host([hidden]),\n  [hidden] {\n    display: none !important;\n  }\n\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: inherit;\n  }\n`;\nconst $17a63ddf0f11756d$var$template = document.createElement(\"template\");\n$17a63ddf0f11756d$var$template.innerHTML = /* html */ `\n  <style>\n    ${$17a63ddf0f11756d$var$styles}\n  </style>\n\n  <div part=\"base\" class=\"tab-panel\">\n    <slot></slot>\n  </div>\n`;\n/**\n * @summary This is a panel for a `<a-tab-group>` tab panel.\n * @documentation https://github.com/georapbox/a-tab-group\n *\n * @tagname a-tab-panel\n * @extends HTMLElement\n *\n * @csspart base - The component's base wrapper.\n *\n * @slot - The content of the tab panel.\n */ class $17a63ddf0f11756d$export$185adf5fa2c760b1 extends HTMLElement {\n    constructor(){\n        super();\n        if (!this.shadowRoot) {\n            const shadowRoot = this.attachShadow({\n                mode: \"open\"\n            });\n            shadowRoot.appendChild($17a63ddf0f11756d$var$template.content.cloneNode(true));\n        }\n    }\n    /**\n   * Lifecycle method that is called when the element is first connected to the DOM.\n   */ connectedCallback() {\n        this.setAttribute(\"slot\", \"panel\");\n        this.setAttribute(\"role\", \"tabpanel\");\n        this.setAttribute(\"hidden\", \"\");\n        if (!this.id) this.id = (0, $aa07eeb3067ea186$export$e2a22331486dcca0)(\"panel\", (++$17a63ddf0f11756d$var$panelCounter).toString());\n    }\n    static defineCustomElement(elementName = \"a-tab-panel\") {\n        if (typeof window !== \"undefined\" && !window.customElements.get(elementName)) window.customElements.define(elementName, $17a63ddf0f11756d$export$185adf5fa2c760b1);\n    }\n}\n$17a63ddf0f11756d$export$185adf5fa2c760b1.defineCustomElement();\n\n\n\n/**\n * The default scroll distance in pixels that the\n * tabs will scroll when the scroll buttons are clicked.\n */ const $6ed9897cfe6c2018$var$DEFAULT_SCROLL_DISTANCE = 200;\n/**\n * The available placements for the tabs.\n */ const $6ed9897cfe6c2018$var$PLACEMENT = {\n    TOP: \"top\",\n    BOTTOM: \"bottom\",\n    START: \"start\",\n    END: \"end\"\n};\n/**\n * The valid placements for the tabs.\n */ const $6ed9897cfe6c2018$var$validPlacements = Object.entries($6ed9897cfe6c2018$var$PLACEMENT).map(([, value])=>value);\n/**\n * The available activation modes for the tabs.\n */ const $6ed9897cfe6c2018$var$ACTIVATION = {\n    AUTO: \"auto\",\n    MANUAL: \"manual\"\n};\n/**\n * Defines key codes to help with handling keyboard events.\n */ const $6ed9897cfe6c2018$var$KEYCODE = {\n    DOWN: \"ArrowDown\",\n    LEFT: \"ArrowLeft\",\n    RIGHT: \"ArrowRight\",\n    UP: \"ArrowUp\",\n    HOME: \"Home\",\n    END: \"End\",\n    ENTER: \"Enter\",\n    SPACE: \" \"\n};\nconst $6ed9897cfe6c2018$var$styles = /* css */ `\n  :host {\n    --selected-tab-color: #005fcc;\n    --selected-tab-bg-color: transparent;\n    --tabs-scroll-behavior: smooth;\n    --scroll-button-width: 2.125em;\n    --scroll-button-height: 2.125em;\n    --scroll-button-inline-offset: 0rem;\n\n    box-sizing: border-box;\n    display: block;\n    contain: content;\n  }\n\n  @media (prefers-reduced-motion: reduce) {\n    :host {\n      --tabs-scroll-behavior: auto;\n    }\n  }\n\n  :host([hidden]),\n  [hidden],\n  ::slotted([hidden]) {\n    display: none !important;\n  }\n\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: inherit;\n  }\n\n  .tab-group {\n    display: flex;\n    width: 100%;\n  }\n\n  .tab-group__nav {\n    position: relative;\n  }\n\n  .tab-group__nav--has-scroll-controls {\n    padding: 0 calc(var(--scroll-button-width) + var(--scroll-button-inline-offset));\n  }\n\n  .tab-group__scroll-button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    width: var(--scroll-button-width);\n    height: var(--scroll-button-height);\n    padding: 0; /* Required for iOS, otherwise the svg is not visible: https://stackoverflow.com/questions/66532071/flex-svg-behaving-strange-in-ios-safari-14-0-3 */\n    border: 0;\n    z-index: 1;\n    background-color: transparent;\n    font-size: inherit;\n    cursor: pointer;\n    color: currentColor;\n  }\n\n  .tab-group__scroll-button--start {\n    left: var(--scroll-button-inline-offset);\n  }\n\n  .tab-group__scroll-button--end {\n    right: var(--scroll-button-inline-offset);\n  }\n\n  .tab-group__tabs {\n    display: flex;\n    padding: 0.25rem;\n    overflow-x: auto;\n    scroll-behavior: var(--tabs-scroll-behavior);\n    scrollbar-width: none;\n  }\n\n  .tab-group__tabs::-webkit-scrollbar {\n    display: none;\n  }\n\n  .tab-group__panels {\n    padding: 1rem 0;\n  }\n\n  /* placement=\"top\" */\n  .tab-group,\n  :host([placement=\"${$6ed9897cfe6c2018$var$PLACEMENT.TOP}\"]) .tab-group {\n    flex-direction: column;\n  }\n\n  /* placement=\"bottom\" */\n  :host([placement=\"${$6ed9897cfe6c2018$var$PLACEMENT.BOTTOM}\"]) .tab-group {\n    flex-direction: column;\n  }\n\n  :host([placement=\"${$6ed9897cfe6c2018$var$PLACEMENT.BOTTOM}\"]) .tab-group__nav {\n    order: 1;\n  }\n\n  /* placement=\"start\" */\n  :host([placement=\"${$6ed9897cfe6c2018$var$PLACEMENT.START}\"]) .tab-group {\n    flex-direction: row;\n  }\n\n  :host([placement=\"${$6ed9897cfe6c2018$var$PLACEMENT.START}\"]) .tab-group__tabs {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  :host([placement=\"${$6ed9897cfe6c2018$var$PLACEMENT.START}\"]) .tab-group__panels {\n    flex: 1;\n    padding: 0 1rem;\n  }\n\n  /* placement=\"end\" */\n  :host([placement=\"${$6ed9897cfe6c2018$var$PLACEMENT.END}\"]) .tab-group {\n    flex-direction: row;\n  }\n\n  :host([placement=\"${$6ed9897cfe6c2018$var$PLACEMENT.END}\"]) .tab-group__nav {\n    order: 1;\n  }\n\n  :host([placement=\"${$6ed9897cfe6c2018$var$PLACEMENT.END}\"]) .tab-group__tabs {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  :host([placement=\"${$6ed9897cfe6c2018$var$PLACEMENT.END}\"]) .tab-group__panels {\n    flex: 1;\n    padding: 0 1rem;\n  }\n`;\nconst $6ed9897cfe6c2018$var$template = document.createElement(\"template\");\n$6ed9897cfe6c2018$var$template.innerHTML = /* html */ `\n  <style>\n    ${$6ed9897cfe6c2018$var$styles}\n  </style>\n\n  <div part=\"base\" class=\"tab-group\">\n    <div part=\"nav\" class=\"tab-group__nav\">\n      <button type=\"button\" part=\"scroll-button scroll-button--start\" class=\"tab-group__scroll-button tab-group__scroll-button--start\" aria-label=\"Scroll to start\" tabindex=\"-1\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"currentColor\" viewBox=\"0 0 16 16\" part=\"scroll-button-icon\">\n          <path fill-rule=\"evenodd\" d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"/>\n        </svg>\n      </button>\n\n      <div part=\"tabs\" class=\"tab-group__tabs\" role=\"tablist\" tabindex=\"-1\">\n        <slot name=\"tab\"></slot>\n      </div>\n\n      <button type=\"button\" part=\"scroll-button scroll-button--end\" class=\"tab-group__scroll-button tab-group__scroll-button--end\" aria-label=\"Scroll to end\" tabindex=\"-1\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1rem\" height=\"1em\" fill=\"currentColor\" viewBox=\"0 0 16 16\" part=\"scroll-button-icon\">\n          <path fill-rule=\"evenodd\" d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z\"/>\n        </svg>\n      </button>\n    </div>\n\n    <div part=\"panels\" class=\"tab-group__panels\">\n      <slot name=\"panel\"></slot>\n    </div>\n  </div>\n`;\n/**\n * @summary Container element for tabs and panels. All children of <a-tab-group> should be either `<a-tab>` or `<a-tab-panel>`.\n * @documentation https://github.com/georapbox/a-tab-group\n *\n * @tagname a-tab-group\n * @extends HTMLElement\n *\n * @property {string} placement - The placement of the tabs.\n * @property {boolean} noScrollControls - Whether or not the scroll controls are enabled.\n * @property {number} scrollDistance - The distance in pixels that the tabs will scroll when the scroll buttons are clicked.\n * @property {string} activation - The activation mode of the tabs.\n * @property {boolean} noTabCycling - Whether or not the tabs should cycle when reaching the first or last tab using the keyboard.\n *\n * @attribute placement - Reflects the placement property.\n * @attribute no-scroll-controls - Reflects the noScrollControls property.\n * @attribute scroll-distance - Reflects the scrollDistance property.\n * @attribute activation - Reflects the activation property.\n * @attribute no-tab-cycling - Reflects the noTabCycling property.\n *\n * @slot tab - Used for groupping tabs in the tab group. Must be <a-tab> elements.\n * @slot panel - Used for groupping tab panels in the tab group. Must be <a-tab-panel> elements.\n *\n * @csspart base - The component's base wrapper.\n * @csspart nav - The nav container.\n * @csspart nav--has-scroll-controls - The nav container when the scroll controls are enabled and visible.\n * @csspart scroll-button - The scroll button.\n * @csspart scroll-button--start - The scroll button for scrolling towards the start.\n * @csspart scroll-button--end - The scroll button for scrolling towards the end.\n * @csspart scroll-button-icon - The scroll button icon.\n * @csspart tabs - The tabs container.\n * @csspart panels - The panels container.\n *\n * @cssproperty --selected-tab-color - The color of the selected tab.\n * @cssproperty --selected-tab-bg-color - The background color of the selected tab.\n * @cssproperty --tabs-scroll-behavior - The scroll behavior of the tabs container.\n * @cssproperty --scroll-button-width - The width of the scroll buttons.\n * @cssproperty --scroll-button-height - The height of the scroll buttons.\n * @cssproperty --scroll-button-inline-offset - The inline offset of the scroll buttons.\n *\n * @event a-tab-show - Fired when a tab is shown.\n * @event a-tab-hide - Fired when a tab is shown.\n *\n * @method selectTabByIndex - Selects the tab at the given index.\n * @method selectTabById - Selects the tab with the given id.\n * @method selectTab - Selects the given tab.\n */ class $6ed9897cfe6c2018$export$4ac05a649254e913 extends HTMLElement {\n    /** @type {Nullable<ResizeObserver>} */ #resizeObserver = null;\n    /** @type {Nullable<number>} */ #rafId = null;\n    /** @type {boolean} */ #hasTabSlotChangedOnce = false;\n    constructor(){\n        super();\n        if (!this.shadowRoot) {\n            const shadowRoot = this.attachShadow({\n                mode: \"open\"\n            });\n            shadowRoot.appendChild($6ed9897cfe6c2018$var$template.content.cloneNode(true));\n        }\n    }\n    static get observedAttributes() {\n        return [\n            \"placement\",\n            \"no-scroll-controls\"\n        ];\n    }\n    /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */ attributeChangedCallback(name, oldValue, newValue) {\n        if (name === \"placement\" && oldValue !== newValue) this.#syncNav();\n        if (name === \"no-scroll-controls\" && oldValue !== newValue) this.#syncNav();\n    }\n    /**\n   * @type {Nullable<string>} - The placement of the tabs.\n   * @default 'top'\n   * @attribute placement - Reflects the placement property.\n   */ get placement() {\n        return this.getAttribute(\"placement\") || $6ed9897cfe6c2018$var$PLACEMENT.TOP;\n    }\n    set placement(value) {\n        if (value != null) this.setAttribute(\"placement\", value);\n    }\n    /**\n   * @type {boolean} - Whether or not the scroll controls are enabled.\n   * @default false\n   * @attribute no-scroll-controls - Reflects the noScrollControls property.\n   */ get noScrollControls() {\n        return this.hasAttribute(\"no-scroll-controls\");\n    }\n    set noScrollControls(value) {\n        this.toggleAttribute(\"no-scroll-controls\", !!value);\n    }\n    /**\n   * @type {number} - The distance in pixels that the tabs will scroll when the scroll buttons are clicked.\n   * @default 200\n   * @attribute scroll-distance - Reflects the scrollDistance property.\n   */ get scrollDistance() {\n        const value = Number(this.getAttribute(\"scroll-distance\"));\n        return Math.abs(value) || $6ed9897cfe6c2018$var$DEFAULT_SCROLL_DISTANCE;\n    }\n    set scrollDistance(value) {\n        this.setAttribute(\"scroll-distance\", Math.abs(value).toString() || $6ed9897cfe6c2018$var$DEFAULT_SCROLL_DISTANCE.toString());\n    }\n    /**\n   * @type {string} - The activation mode of the tabs.\n   * @default 'auto'\n   * @attribute activation - Reflects the activation property.\n   */ get activation() {\n        return this.getAttribute(\"activation\") || $6ed9897cfe6c2018$var$ACTIVATION.AUTO;\n    }\n    set activation(value) {\n        this.setAttribute(\"activation\", value || $6ed9897cfe6c2018$var$ACTIVATION.AUTO);\n    }\n    /**\n   * @type {boolean} - Whether or not the tabs should cycle when reaching the first or last tab using the keyboard.\n   * @default false\n   * @attribute no-tab-cycling - Reflects the noTabCycling property.\n   */ get noTabCycling() {\n        return this.hasAttribute(\"no-tab-cycling\");\n    }\n    set noTabCycling(value) {\n        this.toggleAttribute(\"no-tab-cycling\", !!value);\n    }\n    /**\n   * Lifecycle method that is called when the element is first connected to the DOM.\n   */ connectedCallback() {\n        this.#upgradeProperty(\"placement\");\n        this.#upgradeProperty(\"noScrollControls\");\n        this.#upgradeProperty(\"scrollDistance\");\n        this.#upgradeProperty(\"activation\");\n        this.#upgradeProperty(\"noTabCycling\");\n        const tabSlot = this.shadowRoot?.querySelector(\"slot[name=tab]\");\n        const panelSlot = this.shadowRoot?.querySelector(\"slot[name=panel]\");\n        const tabsContainer = this.shadowRoot?.querySelector(\".tab-group__tabs\");\n        const navContainer = this.shadowRoot?.querySelector(\".tab-group__nav\");\n        const scrollButtons = Array.from(this.shadowRoot?.querySelectorAll(\".tab-group__scroll-button\") || []);\n        tabSlot?.addEventListener(\"slotchange\", this.#handleSlotChange);\n        panelSlot?.addEventListener(\"slotchange\", this.#handleSlotChange);\n        tabsContainer?.addEventListener(\"click\", this.#handleTabClick);\n        tabsContainer?.addEventListener(\"keydown\", this.#handleKeyDown);\n        scrollButtons.forEach((el)=>el.addEventListener(\"click\", this.#handleScrollButtonClick));\n        this.addEventListener(\"a-tab-close\", this.#handleTabClose);\n        if (\"ResizeObserver\" in window) this.#resizeObserver = new ResizeObserver((entries)=>{\n            this.#rafId = window.requestAnimationFrame(()=>{\n                const entry = entries?.[0];\n                const targetElement = entry?.target;\n                const isElementScrollable = targetElement?.scrollWidth > targetElement?.clientWidth;\n                scrollButtons.forEach((el)=>el.toggleAttribute(\"hidden\", !isElementScrollable));\n                navContainer?.part.toggle(\"nav--has-scroll-controls\", isElementScrollable);\n                navContainer?.classList.toggle(\"tab-group__nav--has-scroll-controls\", isElementScrollable);\n            });\n        });\n        this.#hideEmptyTabGroup();\n        this.#syncNav();\n    }\n    /**\n   * Lifecycle method that is called when the element is disconnected from the DOM.\n   */ disconnectedCallback() {\n        const tabSlot = this.shadowRoot?.querySelector(\"slot[name=tab]\");\n        const panelSlot = this.shadowRoot?.querySelector(\"slot[name=panel]\");\n        const tabsContainer = this.shadowRoot?.querySelector(\".tab-group__tabs\");\n        const scrollButtons = Array.from(this.shadowRoot?.querySelectorAll(\".tab-group__scroll-button\") || []);\n        tabSlot?.removeEventListener(\"slotchange\", this.#handleSlotChange);\n        panelSlot?.removeEventListener(\"slotchange\", this.#handleSlotChange);\n        tabsContainer?.removeEventListener(\"click\", this.#handleTabClick);\n        tabsContainer?.removeEventListener(\"keydown\", this.#handleKeyDown);\n        scrollButtons.forEach((el)=>el.removeEventListener(\"click\", this.#handleScrollButtonClick));\n        this.removeEventListener(\"a-tab-close\", this.#handleTabClose);\n        this.#stopResizeObserver();\n    }\n    /**\n   * Starts observing the tabs container for resize events.\n   */ #startResizeObserver() {\n        if (!this.#resizeObserver) return;\n        const scrollElement = this.shadowRoot?.querySelector(\".tab-group__tabs\");\n        if (scrollElement) {\n            this.#resizeObserver.unobserve(scrollElement);\n            this.#resizeObserver.observe(scrollElement);\n        }\n    }\n    /**\n   * Stops observing the tabs container for resize events.\n   */ #stopResizeObserver() {\n        if (!this.#resizeObserver) return;\n        this.#resizeObserver.disconnect();\n        if (this.#rafId !== null) {\n            window.cancelAnimationFrame(this.#rafId);\n            this.#rafId = null;\n        }\n    }\n    /**\n   * Gets the direction of the tab group.\n   *\n   * @returns {string} The direction of the tab group.\n   */ #getDirection() {\n        return getComputedStyle(this).direction || \"ltr\";\n    }\n    /**\n   * Hides the tab group if there are no tabs.\n   */ #hideEmptyTabGroup() {\n        this.hidden = this.#allTabs().length === 0;\n    }\n    /**\n   * Links up tabs with their adjacent panels using `aria-controls` and `aria-labelledby`.\n   * This method makes sure only one tab is selected at a time.\n   */ #linkPanels() {\n        const tabs = this.#allTabs();\n        this.#hideEmptyTabGroup();\n        // Give each panel a `aria-labelledby` attribute that refers to the tab that controls it.\n        tabs.forEach((tab)=>{\n            const panel = tab.nextElementSibling;\n            if (!panel || panel.tagName.toLowerCase() !== \"a-tab-panel\") return console.error(`Tab #${tab.id} is not a sibling of a <a-tab-panel>`);\n            tab.setAttribute(\"aria-controls\", panel.id);\n            panel.setAttribute(\"aria-labelledby\", tab.id);\n        });\n    }\n    /**\n   * Get all panels in the tab group.\n   *\n   * @returns {TabPanel[]} All the panels in the tab group.\n   */ #allPanels() {\n        return Array.from(this.querySelectorAll(\"a-tab-panel\"));\n    }\n    /**\n   * Get all tabs in the tab group.\n   *\n   * @returns {Tab[]} All the tabs in the tab group.\n   */ #allTabs() {\n        return Array.from(this.querySelectorAll(\"a-tab\"));\n    }\n    /**\n   * Get the panel for the given tab.\n   *\n   * @param {Tab} tab - The tab whose panel is to be returned.\n   * @returns {Nullable<TabPanel>} - The panel controlled by the given tab.\n   */ #panelForTab(tab) {\n        const panelId = tab.getAttribute(\"aria-controls\");\n        return this.querySelector(`#${panelId}`);\n    }\n    /**\n   * Get the first non-disabled tab in the tab group.\n   *\n   * @returns {Nullable<Tab>} The first tab in the tab group.\n   */ #firstTab() {\n        const tabs = this.#allTabs();\n        return tabs.find((tab)=>!tab.disabled) || null;\n    }\n    /**\n   * Get the last non-disabled tab in the tab group.\n   *\n   * @returns {Nullable<Tab>} The last tab in the tab group.\n   */ #lastTab() {\n        const tabs = this.#allTabs();\n        for(let i = tabs.length - 1; i >= 0; i--){\n            if (!tabs[i].disabled) return tabs[i];\n        }\n        return null;\n    }\n    /**\n   * Get the tab that comes before the currently selected one, wrapping around when reaching the first tab.\n   * If the currently selected tab is disabled, the method will skip it.\n   *\n   * @returns {Nullable<Tab>} The previous tab.\n   */ #prevTab() {\n        const tabs = this.#allTabs();\n        let newIdx = this.activation === $6ed9897cfe6c2018$var$ACTIVATION.MANUAL ? tabs.findIndex((tab)=>tab.matches(\":focus\")) - 1 : tabs.findIndex((tab)=>tab.selected) - 1;\n        // Keep looping until we find a non-disabled tab.\n        while(tabs[(newIdx + tabs.length) % tabs.length].disabled)newIdx--;\n        // Stop cycling through tabs if we reach the beginning and tab cycling is disabled.\n        if (this.noTabCycling && newIdx < 0) return null;\n        // Add `tabs.length` to make sure the index is a positive number and get the modulus to wrap around if necessary.\n        return tabs[(newIdx + tabs.length) % tabs.length];\n    }\n    /**\n   * Get the tab that comes after the currently selected one, wrapping around when reaching the last tab.\n   * If the currently selected tab is disabled, the method will skip it.\n   *\n   * @returns {Nullable<Tab>} The next tab.\n   */ #nextTab() {\n        const tabs = this.#allTabs();\n        let newIdx = this.activation === $6ed9897cfe6c2018$var$ACTIVATION.MANUAL ? tabs.findIndex((tab)=>tab.matches(\":focus\")) + 1 : tabs.findIndex((tab)=>tab.selected) + 1;\n        // Keep looping until we find a non-disabled tab.\n        while(tabs[newIdx % tabs.length].disabled)newIdx++;\n        // Stop cycling through tabs if we reach the end and tab cycling is disabled.\n        if (this.noTabCycling && newIdx >= tabs.length) return null;\n        return tabs[newIdx % tabs.length];\n    }\n    /**\n   * Marks all tabs as unselected and hides all the panels.\n   * This is called every time the user selects a new tab.\n   */ #reset() {\n        const tabs = this.#allTabs();\n        const panels = this.#allPanels();\n        tabs.forEach((tab)=>tab.selected = false);\n        panels.forEach((panel)=>panel.hidden = true);\n    }\n    /**\n   * Syncs the tab group navigation with the current state of the tab group.\n   *\n   * This is called every time the user:\n   * - adds or removes a tab or panel\n   * - changes the placement of the tabs\n   * - enables or disables the scroll controls\n   *\n   * If the tabs container is scrollable and the scroll controls are enabled,\n   * the scroll buttons are displayed and the resize observer is started,\n   * otherwise they are hidden and the resize observer is stopped.\n   */ #syncNav() {\n        const navContainer = this.shadowRoot?.querySelector(\".tab-group__nav\");\n        /** @type {HTMLButtonElement[]} */ const scrollButtons = Array.from(this.shadowRoot?.querySelectorAll(\".tab-group__scroll-button\") || []);\n        if (this.noScrollControls || this.placement === $6ed9897cfe6c2018$var$PLACEMENT.START || this.placement === $6ed9897cfe6c2018$var$PLACEMENT.END) {\n            this.#stopResizeObserver();\n            scrollButtons.forEach((el)=>el.hidden = true);\n            navContainer?.part.remove(\"nav--has-scroll-controls\");\n            navContainer?.classList.remove(\"tab-group__nav--has-scroll-controls\");\n        } else {\n            this.#startResizeObserver();\n            scrollButtons.forEach((el)=>el.hidden = false);\n        }\n    }\n    /**\n   * Sets the selected tab when the slot changes.\n   * This is called every time the user adds or removes a tab or panel.\n   * This is useful when the user closes the selected tab and we need to select a new one.\n   */ #setSelectedTabOnSlotChange() {\n        const tabs = this.#allTabs();\n        // Get the selected non-disabled tab, or the first non-disabled tab.\n        const tab = tabs.find((tab)=>tab.selected && !tab.disabled) || tabs.find((tab)=>!tab.disabled);\n        if (tab) {\n            if (this.#hasTabSlotChangedOnce && !tab.selected) this.dispatchEvent(new CustomEvent(\"a-tab-show\", {\n                bubbles: true,\n                composed: true,\n                detail: {\n                    tabId: tab.id\n                }\n            }));\n            this.#setSelectedTab(tab);\n        }\n    }\n    /**\n   * Sets the given tab as selected and shows the panel corresponding to the given tab.\n   * Differentiates from `selectTab()` in that it does not emit any events or focus the tab.\n   * Used internally to set the selected tab when a tab is selected by a side effect,\n   * eg. when a tabs and panels are added or removeda and there is a need to select a new tab.\n   *\n   * @param {Tab} tab - The tab to be selected.\n   */ #setSelectedTab(tab) {\n        this.#reset();\n        if (tab) tab.selected = true;\n        const panel = this.#panelForTab(tab);\n        if (panel) panel.hidden = false;\n    }\n    /**\n   * Handles the slotchange event on the tab group.\n   * This is called every time the user adds or removes a tab or panel.\n   *\n   * @param {any} evt - The slotchange event.\n   */ #handleSlotChange = (evt)=>{\n        this.#linkPanels();\n        this.#syncNav();\n        this.#setSelectedTabOnSlotChange();\n        if (evt.target.name === \"tab\") this.#hasTabSlotChangedOnce = true;\n    };\n    /**\n   * Handles key events on the tab group.\n   *\n   * @param {any} evt - The keydown event.\n   */ #handleKeyDown = (evt)=>{\n        if (evt.target.tagName.toLowerCase() !== \"a-tab\" // Ignore any key presses that have a modifier.\n         || evt.altKey // Don’t handle modifier shortcuts typically used by assistive technology.\n        ) return;\n        const placement = $6ed9897cfe6c2018$var$validPlacements.includes(this.placement || \"\") ? this.placement : $6ed9897cfe6c2018$var$PLACEMENT.TOP;\n        const orientation = [\n            $6ed9897cfe6c2018$var$PLACEMENT.TOP,\n            $6ed9897cfe6c2018$var$PLACEMENT.BOTTOM\n        ].includes(placement || \"\") ? \"horizontal\" : \"vertical\";\n        const direction = this.#getDirection();\n        let tab = null;\n        switch(evt.key){\n            case $6ed9897cfe6c2018$var$KEYCODE.LEFT:\n                if (orientation === \"horizontal\") {\n                    tab = direction === \"ltr\" ? this.#prevTab() : this.#nextTab();\n                    if (tab) this.activation === $6ed9897cfe6c2018$var$ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n                }\n                break;\n            case $6ed9897cfe6c2018$var$KEYCODE.RIGHT:\n                if (orientation === \"horizontal\") {\n                    tab = direction === \"ltr\" ? this.#nextTab() : this.#prevTab();\n                    if (tab) this.activation === $6ed9897cfe6c2018$var$ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n                }\n                break;\n            case $6ed9897cfe6c2018$var$KEYCODE.UP:\n                if (orientation === \"vertical\") {\n                    tab = this.#prevTab();\n                    if (tab) this.activation === $6ed9897cfe6c2018$var$ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n                }\n                break;\n            case $6ed9897cfe6c2018$var$KEYCODE.DOWN:\n                if (orientation === \"vertical\") {\n                    tab = this.#nextTab();\n                    if (tab) this.activation === $6ed9897cfe6c2018$var$ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n                }\n                break;\n            case $6ed9897cfe6c2018$var$KEYCODE.HOME:\n                tab = this.#firstTab();\n                if (tab) this.activation === $6ed9897cfe6c2018$var$ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n                break;\n            case $6ed9897cfe6c2018$var$KEYCODE.END:\n                tab = this.#lastTab();\n                if (tab) this.activation === $6ed9897cfe6c2018$var$ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n                break;\n            case $6ed9897cfe6c2018$var$KEYCODE.ENTER:\n            case $6ed9897cfe6c2018$var$KEYCODE.SPACE:\n                tab = evt.target;\n                if (tab) this.selectTab(tab);\n                break;\n            default:\n                // Any other key press is ignored and passed back to the browser.\n                return;\n        }\n        // The browser might have some native functionality bound to the arrow keys, home or end.\n        // `preventDefault()` is called to prevent the browser from taking any actions.\n        evt.preventDefault();\n    };\n    /**\n   * Handles click events on the tab group.\n   *\n   * @param {any} evt - The click event.\n   */ #handleTabClick = (evt)=>{\n        const tab = evt.target.closest(\"a-tab\");\n        if (tab) this.selectTab(tab);\n    };\n    /**\n   * Handles the scroll button click event.\n   *\n   * @param {any} evt - The click event.\n   */ #handleScrollButtonClick = (evt)=>{\n        const scrollButton = evt.target.closest(\".tab-group__scroll-button\");\n        const tabsContainer = this.shadowRoot?.querySelector(\".tab-group__tabs\");\n        if (!scrollButton || !tabsContainer) return;\n        const sign = scrollButton.classList.contains(\"tab-group__scroll-button--start\") ? -1 : 1;\n        const offsetLeft = tabsContainer.scrollLeft;\n        tabsContainer.scrollTo({\n            left: offsetLeft + sign * this.scrollDistance\n        });\n    };\n    /**\n   * Handles the tab close button click event.\n   *\n   * @param {any} evt - The click event.\n   */ #handleTabClose = (evt)=>{\n        const tab = evt.target;\n        const panel = this.#panelForTab(tab);\n        if (tab) {\n            tab.remove();\n            tab.selected && this.dispatchEvent(new CustomEvent(\"a-tab-hide\", {\n                bubbles: true,\n                composed: true,\n                detail: {\n                    tabId: tab.id\n                }\n            }));\n        }\n        if (panel && panel.tagName.toLowerCase() === \"a-tab-panel\") panel.remove();\n    };\n    /**\n   * Wrapper for the `upgradeProperty` function.\n   *\n   * @param {'placement' | 'noScrollControls' | 'scrollDistance' | 'activation' | 'noTabCycling'} prop - The property to upgrade.\n   */ #upgradeProperty(prop) {\n        return (0, $2b7397b7d9d03d51$export$f7b23927dede22b3)(prop, this);\n    }\n    /**\n   * Selects the tab at the given index.\n   * If the tab at the given index is disabled or already selected, this method does nothing.\n   *\n   * @param {number} index - The index of the tab to be selected.\n   */ selectTabByIndex(index) {\n        const tabs = this.#allTabs();\n        const tab = tabs[index];\n        if (tab) this.selectTab(tab);\n    }\n    /**\n   * Selects the tab with the given id.\n   * If the tab with the given id is disabled or already selected, this method does nothing.\n   *\n   * @param {string} id - The id of the tab to be selected.\n   */ selectTabById(id) {\n        const tabs = this.#allTabs();\n        const tab = tabs.find((tab)=>tab.id === id);\n        if (tab) this.selectTab(tab);\n    }\n    /**\n   * Selects the given tab.\n   * If the given tab is disabled or already selected, this method does nothing.\n   *\n   * @param {Tab} tab - The tab to be selected.\n   */ selectTab(tab) {\n        const oldTab = this.#allTabs().find((t)=>t.selected);\n        if (!tab || tab.disabled || tab.selected || tab.tagName.toLowerCase() !== \"a-tab\") return;\n        this.#setSelectedTab(tab);\n        // Queue a microtask to ensure that the tab is focused on the next tick.\n        window.requestAnimationFrame(()=>{\n            tab.scrollIntoView({\n                inline: \"nearest\",\n                block: \"nearest\"\n            });\n            tab.focus();\n        });\n        if (oldTab) this.dispatchEvent(new CustomEvent(\"a-tab-hide\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n                tabId: oldTab.id\n            }\n        }));\n        this.dispatchEvent(new CustomEvent(\"a-tab-show\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n                tabId: tab.id\n            }\n        }));\n    }\n    static defineCustomElement(elementName = \"a-tab-group\") {\n        if (typeof window !== \"undefined\" && !window.customElements.get(elementName)) window.customElements.define(elementName, $6ed9897cfe6c2018$export$4ac05a649254e913);\n    }\n}\n$6ed9897cfe6c2018$export$4ac05a649254e913.defineCustomElement();\n\n\nexport {$6ed9897cfe6c2018$export$4ac05a649254e913 as ATabGroup, $4b127c96b8d62b28$export$6824c350c20eab3a as ATab, $17a63ddf0f11756d$export$185adf5fa2c760b1 as ATabPanel};\n//# sourceMappingURL=a-tab-group.js.map\n","// @ts-check\n\n/**\n * Represents a value that may be of type T, or null.\n *\n * @template T\n * @typedef {T | null} Nullable\n */\n\n/** @typedef {import('./a-tab').ATab} Tab */\n/** @typedef {import('./a-tab-panel').ATabPanel} TabPanel */\n\nexport { ATab } from './a-tab.js';\nexport { ATabPanel } from './a-tab-panel.js';\nimport { upgradeProperty } from './utils/upgrade-property.js';\n\n/**\n * The default scroll distance in pixels that the\n * tabs will scroll when the scroll buttons are clicked.\n */\nconst DEFAULT_SCROLL_DISTANCE = 200;\n\n/**\n * The available placements for the tabs.\n */\nconst PLACEMENT = {\n  TOP: 'top',\n  BOTTOM: 'bottom',\n  START: 'start',\n  END: 'end'\n};\n\n/**\n * The valid placements for the tabs.\n */\nconst validPlacements = Object.entries(PLACEMENT).map(([, value]) => value);\n\n/**\n * The available activation modes for the tabs.\n */\nconst ACTIVATION = {\n  AUTO: 'auto',\n  MANUAL: 'manual'\n};\n\n/**\n * Defines key codes to help with handling keyboard events.\n */\nconst KEYCODE = {\n  DOWN: 'ArrowDown',\n  LEFT: 'ArrowLeft',\n  RIGHT: 'ArrowRight',\n  UP: 'ArrowUp',\n  HOME: 'Home',\n  END: 'End',\n  ENTER: 'Enter',\n  SPACE: ' '\n};\n\nconst styles = /* css */`\n  :host {\n    --selected-tab-color: #005fcc;\n    --selected-tab-bg-color: transparent;\n    --tabs-scroll-behavior: smooth;\n    --scroll-button-width: 2.125em;\n    --scroll-button-height: 2.125em;\n    --scroll-button-inline-offset: 0rem;\n\n    box-sizing: border-box;\n    display: block;\n    contain: content;\n  }\n\n  @media (prefers-reduced-motion: reduce) {\n    :host {\n      --tabs-scroll-behavior: auto;\n    }\n  }\n\n  :host([hidden]),\n  [hidden],\n  ::slotted([hidden]) {\n    display: none !important;\n  }\n\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: inherit;\n  }\n\n  .tab-group {\n    display: flex;\n    width: 100%;\n  }\n\n  .tab-group__nav {\n    position: relative;\n  }\n\n  .tab-group__nav--has-scroll-controls {\n    padding: 0 calc(var(--scroll-button-width) + var(--scroll-button-inline-offset));\n  }\n\n  .tab-group__scroll-button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    width: var(--scroll-button-width);\n    height: var(--scroll-button-height);\n    padding: 0; /* Required for iOS, otherwise the svg is not visible: https://stackoverflow.com/questions/66532071/flex-svg-behaving-strange-in-ios-safari-14-0-3 */\n    border: 0;\n    z-index: 1;\n    background-color: transparent;\n    font-size: inherit;\n    cursor: pointer;\n    color: currentColor;\n  }\n\n  .tab-group__scroll-button--start {\n    left: var(--scroll-button-inline-offset);\n  }\n\n  .tab-group__scroll-button--end {\n    right: var(--scroll-button-inline-offset);\n  }\n\n  .tab-group__tabs {\n    display: flex;\n    padding: 0.25rem;\n    overflow-x: auto;\n    scroll-behavior: var(--tabs-scroll-behavior);\n    scrollbar-width: none;\n  }\n\n  .tab-group__tabs::-webkit-scrollbar {\n    display: none;\n  }\n\n  .tab-group__panels {\n    padding: 1rem 0;\n  }\n\n  /* placement=\"top\" */\n  .tab-group,\n  :host([placement=\"${PLACEMENT.TOP}\"]) .tab-group {\n    flex-direction: column;\n  }\n\n  /* placement=\"bottom\" */\n  :host([placement=\"${PLACEMENT.BOTTOM}\"]) .tab-group {\n    flex-direction: column;\n  }\n\n  :host([placement=\"${PLACEMENT.BOTTOM}\"]) .tab-group__nav {\n    order: 1;\n  }\n\n  /* placement=\"start\" */\n  :host([placement=\"${PLACEMENT.START}\"]) .tab-group {\n    flex-direction: row;\n  }\n\n  :host([placement=\"${PLACEMENT.START}\"]) .tab-group__tabs {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  :host([placement=\"${PLACEMENT.START}\"]) .tab-group__panels {\n    flex: 1;\n    padding: 0 1rem;\n  }\n\n  /* placement=\"end\" */\n  :host([placement=\"${PLACEMENT.END}\"]) .tab-group {\n    flex-direction: row;\n  }\n\n  :host([placement=\"${PLACEMENT.END}\"]) .tab-group__nav {\n    order: 1;\n  }\n\n  :host([placement=\"${PLACEMENT.END}\"]) .tab-group__tabs {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  :host([placement=\"${PLACEMENT.END}\"]) .tab-group__panels {\n    flex: 1;\n    padding: 0 1rem;\n  }\n`;\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = /* html */`\n  <style>\n    ${styles}\n  </style>\n\n  <div part=\"base\" class=\"tab-group\">\n    <div part=\"nav\" class=\"tab-group__nav\">\n      <button type=\"button\" part=\"scroll-button scroll-button--start\" class=\"tab-group__scroll-button tab-group__scroll-button--start\" aria-label=\"Scroll to start\" tabindex=\"-1\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"currentColor\" viewBox=\"0 0 16 16\" part=\"scroll-button-icon\">\n          <path fill-rule=\"evenodd\" d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"/>\n        </svg>\n      </button>\n\n      <div part=\"tabs\" class=\"tab-group__tabs\" role=\"tablist\" tabindex=\"-1\">\n        <slot name=\"tab\"></slot>\n      </div>\n\n      <button type=\"button\" part=\"scroll-button scroll-button--end\" class=\"tab-group__scroll-button tab-group__scroll-button--end\" aria-label=\"Scroll to end\" tabindex=\"-1\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1rem\" height=\"1em\" fill=\"currentColor\" viewBox=\"0 0 16 16\" part=\"scroll-button-icon\">\n          <path fill-rule=\"evenodd\" d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z\"/>\n        </svg>\n      </button>\n    </div>\n\n    <div part=\"panels\" class=\"tab-group__panels\">\n      <slot name=\"panel\"></slot>\n    </div>\n  </div>\n`;\n\n/**\n * @summary Container element for tabs and panels. All children of <a-tab-group> should be either `<a-tab>` or `<a-tab-panel>`.\n * @documentation https://github.com/georapbox/a-tab-group\n *\n * @tagname a-tab-group\n * @extends HTMLElement\n *\n * @property {string} placement - The placement of the tabs.\n * @property {boolean} noScrollControls - Whether or not the scroll controls are enabled.\n * @property {number} scrollDistance - The distance in pixels that the tabs will scroll when the scroll buttons are clicked.\n * @property {string} activation - The activation mode of the tabs.\n * @property {boolean} noTabCycling - Whether or not the tabs should cycle when reaching the first or last tab using the keyboard.\n *\n * @attribute placement - Reflects the placement property.\n * @attribute no-scroll-controls - Reflects the noScrollControls property.\n * @attribute scroll-distance - Reflects the scrollDistance property.\n * @attribute activation - Reflects the activation property.\n * @attribute no-tab-cycling - Reflects the noTabCycling property.\n *\n * @slot tab - Used for groupping tabs in the tab group. Must be <a-tab> elements.\n * @slot panel - Used for groupping tab panels in the tab group. Must be <a-tab-panel> elements.\n *\n * @csspart base - The component's base wrapper.\n * @csspart nav - The nav container.\n * @csspart nav--has-scroll-controls - The nav container when the scroll controls are enabled and visible.\n * @csspart scroll-button - The scroll button.\n * @csspart scroll-button--start - The scroll button for scrolling towards the start.\n * @csspart scroll-button--end - The scroll button for scrolling towards the end.\n * @csspart scroll-button-icon - The scroll button icon.\n * @csspart tabs - The tabs container.\n * @csspart panels - The panels container.\n *\n * @cssproperty --selected-tab-color - The color of the selected tab.\n * @cssproperty --selected-tab-bg-color - The background color of the selected tab.\n * @cssproperty --tabs-scroll-behavior - The scroll behavior of the tabs container.\n * @cssproperty --scroll-button-width - The width of the scroll buttons.\n * @cssproperty --scroll-button-height - The height of the scroll buttons.\n * @cssproperty --scroll-button-inline-offset - The inline offset of the scroll buttons.\n *\n * @event a-tab-show - Fired when a tab is shown.\n * @event a-tab-hide - Fired when a tab is shown.\n *\n * @method selectTabByIndex - Selects the tab at the given index.\n * @method selectTabById - Selects the tab with the given id.\n * @method selectTab - Selects the given tab.\n */\nclass ATabGroup extends HTMLElement {\n  /** @type {Nullable<ResizeObserver>} */\n  #resizeObserver = null;\n\n  /** @type {Nullable<number>} */\n  #rafId = null;\n\n  /** @type {boolean} */\n  #hasTabSlotChangedOnce = false;\n\n  constructor() {\n    super();\n\n    if (!this.shadowRoot) {\n      const shadowRoot = this.attachShadow({ mode: 'open' });\n      shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n  }\n\n  static get observedAttributes() {\n    return ['placement', 'no-scroll-controls'];\n  }\n\n  /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'placement' && oldValue !== newValue) {\n      this.#syncNav();\n    }\n\n    if (name === 'no-scroll-controls' && oldValue !== newValue) {\n      this.#syncNav();\n    }\n  }\n\n  /**\n   * @type {Nullable<string>} - The placement of the tabs.\n   * @default 'top'\n   * @attribute placement - Reflects the placement property.\n   */\n  get placement() {\n    return this.getAttribute('placement') || PLACEMENT.TOP;\n  }\n\n  set placement(value) {\n    if (value != null) {\n      this.setAttribute('placement', value);\n    }\n  }\n\n  /**\n   * @type {boolean} - Whether or not the scroll controls are enabled.\n   * @default false\n   * @attribute no-scroll-controls - Reflects the noScrollControls property.\n   */\n  get noScrollControls() {\n    return this.hasAttribute('no-scroll-controls');\n  }\n\n  set noScrollControls(value) {\n    this.toggleAttribute('no-scroll-controls', !!value);\n  }\n\n  /**\n   * @type {number} - The distance in pixels that the tabs will scroll when the scroll buttons are clicked.\n   * @default 200\n   * @attribute scroll-distance - Reflects the scrollDistance property.\n   */\n  get scrollDistance() {\n    const value = Number(this.getAttribute('scroll-distance'));\n    return Math.abs(value) || DEFAULT_SCROLL_DISTANCE;\n  }\n\n  set scrollDistance(value) {\n    this.setAttribute('scroll-distance', Math.abs(value).toString() || DEFAULT_SCROLL_DISTANCE.toString());\n  }\n\n  /**\n   * @type {string} - The activation mode of the tabs.\n   * @default 'auto'\n   * @attribute activation - Reflects the activation property.\n   */\n  get activation() {\n    return this.getAttribute('activation') || ACTIVATION.AUTO;\n  }\n\n  set activation(value) {\n    this.setAttribute('activation', value || ACTIVATION.AUTO);\n  }\n\n  /**\n   * @type {boolean} - Whether or not the tabs should cycle when reaching the first or last tab using the keyboard.\n   * @default false\n   * @attribute no-tab-cycling - Reflects the noTabCycling property.\n   */\n  get noTabCycling() {\n    return this.hasAttribute('no-tab-cycling');\n  }\n\n  set noTabCycling(value) {\n    this.toggleAttribute('no-tab-cycling', !!value);\n  }\n\n  /**\n   * Lifecycle method that is called when the element is first connected to the DOM.\n   */\n  connectedCallback() {\n    this.#upgradeProperty('placement');\n    this.#upgradeProperty('noScrollControls');\n    this.#upgradeProperty('scrollDistance');\n    this.#upgradeProperty('activation');\n    this.#upgradeProperty('noTabCycling');\n\n    const tabSlot = this.shadowRoot?.querySelector('slot[name=tab]');\n    const panelSlot = this.shadowRoot?.querySelector('slot[name=panel]');\n    const tabsContainer = this.shadowRoot?.querySelector('.tab-group__tabs');\n    const navContainer = this.shadowRoot?.querySelector('.tab-group__nav');\n    const scrollButtons = Array.from(this.shadowRoot?.querySelectorAll('.tab-group__scroll-button') || []);\n\n    tabSlot?.addEventListener('slotchange', this.#handleSlotChange);\n    panelSlot?.addEventListener('slotchange', this.#handleSlotChange);\n    tabsContainer?.addEventListener('click', this.#handleTabClick);\n    tabsContainer?.addEventListener('keydown', this.#handleKeyDown);\n    scrollButtons.forEach(el => el.addEventListener('click', this.#handleScrollButtonClick));\n    this.addEventListener('a-tab-close', this.#handleTabClose);\n\n    if ('ResizeObserver' in window) {\n      this.#resizeObserver = new ResizeObserver(entries => {\n        this.#rafId = window.requestAnimationFrame(() => {\n          const entry = entries?.[0];\n          const targetElement = entry?.target;\n          const isElementScrollable = targetElement?.scrollWidth > targetElement?.clientWidth;\n          scrollButtons.forEach(el => el.toggleAttribute('hidden', !isElementScrollable));\n          navContainer?.part.toggle('nav--has-scroll-controls', isElementScrollable);\n          navContainer?.classList.toggle('tab-group__nav--has-scroll-controls', isElementScrollable);\n        });\n      });\n    }\n\n    this.#hideEmptyTabGroup();\n    this.#syncNav();\n  }\n\n  /**\n   * Lifecycle method that is called when the element is disconnected from the DOM.\n   */\n  disconnectedCallback() {\n    const tabSlot = this.shadowRoot?.querySelector('slot[name=tab]');\n    const panelSlot = this.shadowRoot?.querySelector('slot[name=panel]');\n    const tabsContainer = this.shadowRoot?.querySelector('.tab-group__tabs');\n    const scrollButtons = Array.from(this.shadowRoot?.querySelectorAll('.tab-group__scroll-button') || []);\n\n    tabSlot?.removeEventListener('slotchange', this.#handleSlotChange);\n    panelSlot?.removeEventListener('slotchange', this.#handleSlotChange);\n    tabsContainer?.removeEventListener('click', this.#handleTabClick);\n    tabsContainer?.removeEventListener('keydown', this.#handleKeyDown);\n    scrollButtons.forEach(el => el.removeEventListener('click', this.#handleScrollButtonClick));\n    this.removeEventListener('a-tab-close', this.#handleTabClose);\n    this.#stopResizeObserver();\n  }\n\n  /**\n   * Starts observing the tabs container for resize events.\n   */\n  #startResizeObserver() {\n    if (!this.#resizeObserver) {\n      return;\n    }\n\n    const scrollElement = this.shadowRoot?.querySelector('.tab-group__tabs');\n\n    if (scrollElement) {\n      this.#resizeObserver.unobserve(scrollElement);\n      this.#resizeObserver.observe(scrollElement);\n    }\n  }\n\n  /**\n   * Stops observing the tabs container for resize events.\n   */\n  #stopResizeObserver() {\n    if (!this.#resizeObserver) {\n      return;\n    }\n\n    this.#resizeObserver.disconnect();\n\n    if (this.#rafId !== null) {\n      window.cancelAnimationFrame(this.#rafId);\n      this.#rafId = null;\n    }\n  }\n\n  /**\n   * Gets the direction of the tab group.\n   *\n   * @returns {string} The direction of the tab group.\n   */\n  #getDirection() {\n    return getComputedStyle(this).direction || 'ltr';\n  }\n\n  /**\n   * Hides the tab group if there are no tabs.\n   */\n  #hideEmptyTabGroup() {\n    this.hidden = this.#allTabs().length === 0;\n  }\n\n  /**\n   * Links up tabs with their adjacent panels using `aria-controls` and `aria-labelledby`.\n   * This method makes sure only one tab is selected at a time.\n   */\n  #linkPanels() {\n    const tabs = this.#allTabs();\n\n    this.#hideEmptyTabGroup();\n\n    // Give each panel a `aria-labelledby` attribute that refers to the tab that controls it.\n    tabs.forEach(tab => {\n      const panel = tab.nextElementSibling;\n\n      if (!panel || panel.tagName.toLowerCase() !== 'a-tab-panel') {\n        return console.error(`Tab #${tab.id} is not a sibling of a <a-tab-panel>`);\n      }\n\n      tab.setAttribute('aria-controls', panel.id);\n      panel.setAttribute('aria-labelledby', tab.id);\n    });\n  }\n\n  /**\n   * Get all panels in the tab group.\n   *\n   * @returns {TabPanel[]} All the panels in the tab group.\n   */\n  #allPanels() {\n    return Array.from(this.querySelectorAll('a-tab-panel'));\n  }\n\n  /**\n   * Get all tabs in the tab group.\n   *\n   * @returns {Tab[]} All the tabs in the tab group.\n   */\n  #allTabs() {\n    return Array.from(this.querySelectorAll('a-tab'));\n  }\n\n  /**\n   * Get the panel for the given tab.\n   *\n   * @param {Tab} tab - The tab whose panel is to be returned.\n   * @returns {Nullable<TabPanel>} - The panel controlled by the given tab.\n   */\n  #panelForTab(tab) {\n    const panelId = tab.getAttribute('aria-controls');\n    return this.querySelector(`#${panelId}`);\n  }\n\n  /**\n   * Get the first non-disabled tab in the tab group.\n   *\n   * @returns {Nullable<Tab>} The first tab in the tab group.\n   */\n  #firstTab() {\n    const tabs = this.#allTabs();\n    return tabs.find(tab => !tab.disabled) || null;\n  }\n\n  /**\n   * Get the last non-disabled tab in the tab group.\n   *\n   * @returns {Nullable<Tab>} The last tab in the tab group.\n   */\n  #lastTab() {\n    const tabs = this.#allTabs();\n\n    for (let i = tabs.length - 1; i >= 0; i--) {\n      if (!tabs[i].disabled) {\n        return tabs[i];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get the tab that comes before the currently selected one, wrapping around when reaching the first tab.\n   * If the currently selected tab is disabled, the method will skip it.\n   *\n   * @returns {Nullable<Tab>} The previous tab.\n   */\n  #prevTab() {\n    const tabs = this.#allTabs();\n    let newIdx = this.activation === ACTIVATION.MANUAL\n      ? tabs.findIndex(tab => tab.matches(':focus')) - 1\n      : tabs.findIndex(tab => tab.selected) - 1;\n\n    // Keep looping until we find a non-disabled tab.\n    while (tabs[(newIdx + tabs.length) % tabs.length].disabled) {\n      newIdx--;\n    }\n\n    // Stop cycling through tabs if we reach the beginning and tab cycling is disabled.\n    if (this.noTabCycling && newIdx < 0) {\n      return null;\n    }\n\n    // Add `tabs.length` to make sure the index is a positive number and get the modulus to wrap around if necessary.\n    return tabs[(newIdx + tabs.length) % tabs.length];\n  }\n\n  /**\n   * Get the tab that comes after the currently selected one, wrapping around when reaching the last tab.\n   * If the currently selected tab is disabled, the method will skip it.\n   *\n   * @returns {Nullable<Tab>} The next tab.\n   */\n  #nextTab() {\n    const tabs = this.#allTabs();\n    let newIdx = this.activation === ACTIVATION.MANUAL\n      ? tabs.findIndex(tab => tab.matches(':focus')) + 1\n      : tabs.findIndex(tab => tab.selected) + 1;\n\n    // Keep looping until we find a non-disabled tab.\n    while (tabs[newIdx % tabs.length].disabled) {\n      newIdx++;\n    }\n\n    // Stop cycling through tabs if we reach the end and tab cycling is disabled.\n    if (this.noTabCycling && newIdx >= tabs.length) {\n      return null;\n    }\n\n    return tabs[newIdx % tabs.length];\n  }\n\n  /**\n   * Marks all tabs as unselected and hides all the panels.\n   * This is called every time the user selects a new tab.\n   */\n  #reset() {\n    const tabs = this.#allTabs();\n    const panels = this.#allPanels();\n\n    tabs.forEach(tab => tab.selected = false);\n    panels.forEach(panel => panel.hidden = true);\n  }\n\n  /**\n   * Syncs the tab group navigation with the current state of the tab group.\n   *\n   * This is called every time the user:\n   * - adds or removes a tab or panel\n   * - changes the placement of the tabs\n   * - enables or disables the scroll controls\n   *\n   * If the tabs container is scrollable and the scroll controls are enabled,\n   * the scroll buttons are displayed and the resize observer is started,\n   * otherwise they are hidden and the resize observer is stopped.\n   */\n  #syncNav() {\n    const navContainer = this.shadowRoot?.querySelector('.tab-group__nav');\n\n    /** @type {HTMLButtonElement[]} */\n    const scrollButtons = Array.from(this.shadowRoot?.querySelectorAll('.tab-group__scroll-button') || []);\n\n    if (this.noScrollControls || this.placement === PLACEMENT.START || this.placement === PLACEMENT.END) {\n      this.#stopResizeObserver();\n      scrollButtons.forEach(el => el.hidden = true);\n      navContainer?.part.remove('nav--has-scroll-controls');\n      navContainer?.classList.remove('tab-group__nav--has-scroll-controls');\n    } else {\n      this.#startResizeObserver();\n      scrollButtons.forEach(el => el.hidden = false);\n    }\n  }\n\n  /**\n   * Sets the selected tab when the slot changes.\n   * This is called every time the user adds or removes a tab or panel.\n   * This is useful when the user closes the selected tab and we need to select a new one.\n   */\n  #setSelectedTabOnSlotChange() {\n    const tabs = this.#allTabs();\n\n    // Get the selected non-disabled tab, or the first non-disabled tab.\n    const tab = tabs.find(tab => tab.selected && !tab.disabled) || tabs.find(tab => !tab.disabled);\n\n    if (tab) {\n      if (this.#hasTabSlotChangedOnce && !tab.selected) {\n        this.dispatchEvent(new CustomEvent('a-tab-show', {\n          bubbles: true,\n          composed: true,\n          detail: { tabId: tab.id }\n        }));\n      }\n\n      this.#setSelectedTab(tab);\n    }\n  }\n\n  /**\n   * Sets the given tab as selected and shows the panel corresponding to the given tab.\n   * Differentiates from `selectTab()` in that it does not emit any events or focus the tab.\n   * Used internally to set the selected tab when a tab is selected by a side effect,\n   * eg. when a tabs and panels are added or removeda and there is a need to select a new tab.\n   *\n   * @param {Tab} tab - The tab to be selected.\n   */\n  #setSelectedTab(tab) {\n    this.#reset();\n\n    if (tab) {\n      tab.selected = true;\n    }\n\n    const panel = this.#panelForTab(tab);\n\n    if (panel) {\n      panel.hidden = false;\n    }\n  }\n\n  /**\n   * Handles the slotchange event on the tab group.\n   * This is called every time the user adds or removes a tab or panel.\n   *\n   * @param {any} evt - The slotchange event.\n   */\n  #handleSlotChange = evt => {\n    this.#linkPanels();\n    this.#syncNav();\n    this.#setSelectedTabOnSlotChange();\n\n    if (evt.target.name === 'tab') {\n      this.#hasTabSlotChangedOnce = true;\n    }\n  };\n\n  /**\n   * Handles key events on the tab group.\n   *\n   * @param {any} evt - The keydown event.\n   */\n  #handleKeyDown = evt => {\n    if (\n      evt.target.tagName.toLowerCase() !== 'a-tab' // Ignore any key presses that have a modifier.\n      || evt.altKey // Don’t handle modifier shortcuts typically used by assistive technology.\n    ) {\n      return;\n    }\n\n    const placement = validPlacements.includes(this.placement || '') ? this.placement : PLACEMENT.TOP;\n    const orientation = [PLACEMENT.TOP, PLACEMENT.BOTTOM].includes(placement || '') ? 'horizontal' : 'vertical';\n    const direction = this.#getDirection();\n    let tab = null;\n\n    switch (evt.key) {\n      case KEYCODE.LEFT:\n        if (orientation === 'horizontal') {\n          tab = direction === 'ltr' ? this.#prevTab() : this.#nextTab();\n          if (tab) {\n            this.activation === ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n          }\n        }\n        break;\n      case KEYCODE.RIGHT:\n        if (orientation === 'horizontal') {\n          tab = direction === 'ltr' ? this.#nextTab() : this.#prevTab();\n          if (tab) {\n            this.activation === ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n          }\n        }\n        break;\n      case KEYCODE.UP:\n        if (orientation === 'vertical') {\n          tab = this.#prevTab();\n          if (tab) {\n            this.activation === ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n          }\n        }\n        break;\n      case KEYCODE.DOWN:\n        if (orientation === 'vertical') {\n          tab = this.#nextTab();\n          if (tab) {\n            this.activation === ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n          }\n        }\n        break;\n      case KEYCODE.HOME:\n        tab = this.#firstTab();\n        if (tab) {\n          this.activation === ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n        }\n        break;\n      case KEYCODE.END:\n        tab = this.#lastTab();\n        if (tab) {\n          this.activation === ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n        }\n        break;\n      case KEYCODE.ENTER:\n      case KEYCODE.SPACE:\n        tab = evt.target;\n        if (tab) {\n          this.selectTab(tab);\n        }\n        break;\n      default:\n        // Any other key press is ignored and passed back to the browser.\n        return;\n    }\n\n    // The browser might have some native functionality bound to the arrow keys, home or end.\n    // `preventDefault()` is called to prevent the browser from taking any actions.\n    evt.preventDefault();\n  };\n\n  /**\n   * Handles click events on the tab group.\n   *\n   * @param {any} evt - The click event.\n   */\n  #handleTabClick = evt => {\n    const tab = evt.target.closest('a-tab');\n\n    if (tab) {\n      this.selectTab(tab);\n    }\n  };\n\n  /**\n   * Handles the scroll button click event.\n   *\n   * @param {any} evt - The click event.\n   */\n  #handleScrollButtonClick = evt => {\n    const scrollButton = evt.target.closest('.tab-group__scroll-button');\n    const tabsContainer = this.shadowRoot?.querySelector('.tab-group__tabs');\n\n    if (!scrollButton || !tabsContainer) {\n      return;\n    }\n\n    const sign = scrollButton.classList.contains('tab-group__scroll-button--start') ? -1 : 1;\n    const offsetLeft = tabsContainer.scrollLeft;\n\n    tabsContainer.scrollTo({\n      left: offsetLeft + sign * this.scrollDistance\n    });\n  };\n\n  /**\n   * Handles the tab close button click event.\n   *\n   * @param {any} evt - The click event.\n   */\n  #handleTabClose = evt => {\n    const tab = evt.target;\n    const panel = this.#panelForTab(tab);\n\n    if (tab) {\n      tab.remove();\n\n      tab.selected && this.dispatchEvent(new CustomEvent('a-tab-hide', {\n        bubbles: true,\n        composed: true,\n        detail: { tabId: tab.id }\n      }));\n    }\n\n    if (panel && panel.tagName.toLowerCase() === 'a-tab-panel') {\n      panel.remove();\n    }\n  };\n\n  /**\n   * Wrapper for the `upgradeProperty` function.\n   *\n   * @param {'placement' | 'noScrollControls' | 'scrollDistance' | 'activation' | 'noTabCycling'} prop - The property to upgrade.\n   */\n  #upgradeProperty(prop) {\n    return upgradeProperty(prop, this);\n  }\n\n  /**\n   * Selects the tab at the given index.\n   * If the tab at the given index is disabled or already selected, this method does nothing.\n   *\n   * @param {number} index - The index of the tab to be selected.\n   */\n  selectTabByIndex(index) {\n    const tabs = this.#allTabs();\n    const tab = tabs[index];\n\n    if (tab) {\n      this.selectTab(tab);\n    }\n  }\n\n  /**\n   * Selects the tab with the given id.\n   * If the tab with the given id is disabled or already selected, this method does nothing.\n   *\n   * @param {string} id - The id of the tab to be selected.\n   */\n  selectTabById(id) {\n    const tabs = this.#allTabs();\n    const tab = tabs.find(tab => tab.id === id);\n\n    if (tab) {\n      this.selectTab(tab);\n    }\n  }\n\n  /**\n   * Selects the given tab.\n   * If the given tab is disabled or already selected, this method does nothing.\n   *\n   * @param {Tab} tab - The tab to be selected.\n   */\n  selectTab(tab) {\n    const oldTab = this.#allTabs().find(t => t.selected);\n\n    if (!tab || tab.disabled || tab.selected || tab.tagName.toLowerCase() !== 'a-tab') {\n      return;\n    }\n\n    this.#setSelectedTab(tab);\n\n    // Queue a microtask to ensure that the tab is focused on the next tick.\n    window.requestAnimationFrame(() => {\n      tab.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n      tab.focus();\n    });\n\n    if (oldTab) {\n      this.dispatchEvent(new CustomEvent('a-tab-hide', {\n        bubbles: true,\n        composed: true,\n        detail: { tabId: oldTab.id }\n      }));\n    }\n\n    this.dispatchEvent(new CustomEvent('a-tab-show', {\n      bubbles: true,\n      composed: true,\n      detail: { tabId: tab.id }\n    }));\n  }\n\n  static defineCustomElement(elementName = 'a-tab-group') {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, ATabGroup);\n    }\n  }\n}\n\nATabGroup.defineCustomElement();\n\nexport { ATabGroup };\n","// @ts-check\n\nimport { uid } from './utils/uid.js';\nimport { upgradeProperty } from './utils/upgrade-property.js';\n\nlet tabCounter = 0;\n\nconst styles = /* css */`\n  :host {\n    box-sizing: border-box;\n    display: inline-block;\n    contain: content;\n  }\n\n  :host([hidden]),\n  [hidden] {\n    display: none !important;\n  }\n\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: inherit;\n  }\n\n  .tab {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    width: 100%;\n    padding: 0.375rem 0.75rem;\n    white-space: nowrap;\n    cursor: pointer;\n  }\n\n  :host([disabled]) .tab {\n    opacity: 0.7;\n    cursor: not-allowed;\n  }\n\n  :host([selected]) .tab {\n    color: var(--selected-tab-color);\n    background-color: var(--selected-tab-bg-color);\n  }\n\n  .tab__close {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0.25rem;\n    font-size: inherit;\n    cursor: pointer;\n  }\n`;\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = /* html */`\n  <style>\n    ${styles}\n  </style>\n\n  <div part=\"base\" class=\"tab\">\n    <slot></slot>\n  </div>\n`;\n\n/**\n * @summary\n * This is a tab for a <a-tab-group> tab panel.\n * `<a-tab>` should always be used with `role=heading` in the markup so that the semantics remain useable when JavaScript is failing.\n * @documentation https://github.com/georapbox/a-tab-group\n *\n * @tagname a-tab\n * @extends HTMLElement\n *\n * @property {boolean} selected - Whether the tab is selected.\n * @property {boolean} disabled - Whether the tab is disabled.\n * @property {boolean} closable - Whether the tab is closable.\n *\n * @attribute selected - Reflects the selected property.\n * @attribute disabled - Reflects the disabled property.\n * @attribute closable - Reflects the closable property.\n *\n * @csspart base - The component's base wrapper.\n * @csspart close-tab - The close button.\n * @csspart close-tab-icon - The close button icon.\n *\n * @slot - The tab's content.\n *\n * @event a-tab-close - Fires when the tab's close button is clicked.\n */\nclass ATab extends HTMLElement {\n  constructor() {\n    super();\n\n    if (!this.shadowRoot) {\n      const shadowRoot = this.attachShadow({ mode: 'open' });\n      shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n  }\n\n  static get observedAttributes() {\n    return ['selected', 'disabled', 'closable'];\n  }\n\n  /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'selected' && oldValue !== newValue) {\n      this.setAttribute('aria-selected', this.selected.toString());\n    }\n\n    if (name === 'disabled' && oldValue !== newValue) {\n      this.setAttribute('aria-disabled', this.disabled.toString());\n      this.setAttribute('tabindex', this.disabled ? '-1' : '0');\n    }\n\n    if (name === 'closable' && oldValue !== newValue) {\n      if (this.closable) {\n        const closeButton = document.createElement('span');\n        closeButton.className = 'tab__close';\n        closeButton.setAttribute('part', 'close-tab');\n        closeButton.innerHTML = /* html */`<svg part=\"close-tab-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.875em\" height=\"0.875em\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z\"/></svg>`;\n        this.shadowRoot?.querySelector('.tab')?.appendChild(closeButton);\n        closeButton.addEventListener('click', this.#handleCloseButtonClick);\n      } else {\n        const closeButton = this.shadowRoot?.querySelector('.tab__close');\n        closeButton?.removeEventListener('click', this.#handleCloseButtonClick);\n        closeButton?.remove();\n      }\n    }\n  }\n\n  /**\n   * Lifecycle method that is called when the element is first connected to the DOM.\n   */\n  connectedCallback() {\n    this.#upgradeProperty('selected');\n    this.#upgradeProperty('disabled');\n    this.#upgradeProperty('closable');\n\n    if (!this.id) {\n      this.id = uid('tab', (++tabCounter).toString());\n    }\n\n    this.setAttribute('slot', 'tab');\n    this.setAttribute('role', 'tab');\n    this.setAttribute('aria-selected', 'false');\n    this.setAttribute('tabindex', this.disabled ? '-1' : '0');\n  }\n\n  /**\n   * Lifecycle method that is called when the element is disconnected from the DOM.\n   */\n  disconnectedCallback() {\n    const closeButton = this.shadowRoot?.querySelector('.tab__close');\n    closeButton?.removeEventListener('click', this.#handleCloseButtonClick);\n  }\n\n  /**\n   * @type {boolean} - Whether the tab is selected.\n   * @default false\n   * @attribute selected - Reflects the selected property.\n   */\n  get selected() {\n    return this.hasAttribute('selected');\n  }\n\n  set selected(value) {\n    this.toggleAttribute('selected', !!value);\n  }\n\n  /**\n   * @type {boolean} - Whether the tab is disabled.\n   * @default false\n   * @attribute disabled - Reflects the disabled property.\n   */\n  get disabled() {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value) {\n    this.toggleAttribute('disabled', !!value);\n  }\n\n  /**\n   * @type {boolean} - Whether the tab is closable.\n   * @default false\n   * @attribute closable - Reflects the closable property.\n   */\n  get closable() {\n    return this.hasAttribute('closable');\n  }\n\n  set closable(value) {\n    this.toggleAttribute('closable', !!value);\n  }\n\n  /**\n   * Handles the click event on the close button.\n   *\n   * @param {Event} evt - The click event.\n   */\n  #handleCloseButtonClick = evt => {\n    evt.stopPropagation();\n\n    this.dispatchEvent(new CustomEvent(`a-tab-close`, {\n      bubbles: true,\n      composed: true,\n      detail: { tabId: this.id }\n    }));\n  };\n\n  /**\n   * Wrapper for the `upgradeProperty` function.\n   *\n   * @param {'selected' | 'disabled' | 'closable'} prop - The property to upgrade.\n   */\n  #upgradeProperty(prop) {\n    return upgradeProperty(prop, this);\n  }\n\n  static defineCustomElement(elementName = 'a-tab') {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, ATab);\n    }\n  }\n}\n\nATab.defineCustomElement();\n\nexport { ATab };\n","// @ts-check\n\n/**\n * Generates a unique id of the form `${prefix}-${randomString}-${suffix}`.\n *\n * @param {string} [prefix=''] - The prefix to use for the id.\n * @param {string} [suffix=''] - The suffix to use for the id.\n * @returns {string} - The unique id.\n */\nconst uid = (prefix = '', suffix = '') => {\n  const prefixString = typeof prefix === 'string' && prefix !== '' ? prefix + '-' : '';\n  const suffixString = typeof suffix === 'string' && suffix !== '' ? '-' + suffix : '';\n  const randomString = Math.random().toString(36).substring(2, 8); // Pseudo-random string of six alphanumeric characters.\n\n  return `${prefixString}${randomString}${suffixString}`;\n};\n\nexport { uid };\n","// @ts-check\n\n/**\n * This is to safe guard against cases where, for instance, a framework may have added the element to the page and set a\n * value on one of its properties, but lazy loaded its definition. Without this guard, the upgraded element would miss that\n * property and the instance property would prevent the class property setter from ever being called.\n *\n * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n *\n * @param {string} prop - The property to upgrade.\n * @param {any} instance - The instance of the tab.\n */\nconst upgradeProperty = (prop, instance) => {\n  if (Object.prototype.hasOwnProperty.call(instance, prop)) {\n    const value = instance[prop];\n    delete instance[prop];\n    instance[prop] = value;\n  }\n};\n\nexport { upgradeProperty };\n","// @ts-check\n\nimport { uid } from './utils/uid.js';\n\nlet panelCounter = 0;\n\nconst styles = /* css */`\n  :host {\n    box-sizing: border-box;\n    display: block;\n    contain: content;\n  }\n\n  :host([hidden]),\n  [hidden] {\n    display: none !important;\n  }\n\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: inherit;\n  }\n`;\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = /* html */`\n  <style>\n    ${styles}\n  </style>\n\n  <div part=\"base\" class=\"tab-panel\">\n    <slot></slot>\n  </div>\n`;\n\n/**\n * @summary This is a panel for a `<a-tab-group>` tab panel.\n * @documentation https://github.com/georapbox/a-tab-group\n *\n * @tagname a-tab-panel\n * @extends HTMLElement\n *\n * @csspart base - The component's base wrapper.\n *\n * @slot - The content of the tab panel.\n */\nclass ATabPanel extends HTMLElement {\n  constructor() {\n    super();\n\n    if (!this.shadowRoot) {\n      const shadowRoot = this.attachShadow({ mode: 'open' });\n      shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n  }\n\n  /**\n   * Lifecycle method that is called when the element is first connected to the DOM.\n   */\n  connectedCallback() {\n    this.setAttribute('slot', 'panel');\n    this.setAttribute('role', 'tabpanel');\n    this.setAttribute('hidden', '');\n\n    if (!this.id) {\n      this.id = uid('panel', (++panelCounter).toString());\n    }\n  }\n\n  static defineCustomElement(elementName = 'a-tab-panel') {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, ATabPanel);\n    }\n  }\n}\n\nATabPanel.defineCustomElement();\n\nexport { ATabPanel };\n"],"names":["$aa07eeb3067ea186$export$e2a22331486dcca0","prefix","suffix","randomString","Math","random","toString","substring","$2b7397b7d9d03d51$export$f7b23927dede22b3","prop","instance","Object","prototype","hasOwnProperty","call","value","$4b127c96b8d62b28$var$tabCounter","$4b127c96b8d62b28$var$styles","$4b127c96b8d62b28$var$template","document","createElement","innerHTML","$4b127c96b8d62b28$export$6824c350c20eab3a","HTMLElement","constructor","shadowRoot","attachShadow","mode","appendChild","content","cloneNode","observedAttributes","attributeChangedCallback","name","oldValue","newValue","setAttribute","selected","disabled","closable","closeButton","className","querySelector","addEventListener","handleCloseButtonClick","removeEventListener","remove","connectedCallback","upgradeProperty","id","disconnectedCallback","hasAttribute","toggleAttribute","evt","stopPropagation","dispatchEvent","CustomEvent","bubbles","composed","detail","tabId","defineCustomElement","elementName","window","customElements","get","define","$17a63ddf0f11756d$var$panelCounter","$17a63ddf0f11756d$var$styles","$17a63ddf0f11756d$var$template","$17a63ddf0f11756d$export$185adf5fa2c760b1","$6ed9897cfe6c2018$var$PLACEMENT","TOP","BOTTOM","START","END","$6ed9897cfe6c2018$var$validPlacements","entries","map","$6ed9897cfe6c2018$var$ACTIVATION","AUTO","MANUAL","$6ed9897cfe6c2018$var$KEYCODE","DOWN","LEFT","RIGHT","UP","HOME","ENTER","SPACE","$6ed9897cfe6c2018$var$styles","$6ed9897cfe6c2018$var$template","$6ed9897cfe6c2018$export$4ac05a649254e913","resizeObserver","rafId","hasTabSlotChangedOnce","syncNav","placement","getAttribute","noScrollControls","scrollDistance","abs","Number","$6ed9897cfe6c2018$var$DEFAULT_SCROLL_DISTANCE","activation","noTabCycling","tabSlot","panelSlot","tabsContainer","navContainer","scrollButtons","Array","from","querySelectorAll","handleSlotChange","handleTabClick","handleKeyDown","forEach","el","handleScrollButtonClick","handleTabClose","ResizeObserver","requestAnimationFrame","entry","targetElement","target","isElementScrollable","scrollWidth","clientWidth","part","toggle","classList","hideEmptyTabGroup","stopResizeObserver","startResizeObserver","scrollElement","unobserve","observe","disconnect","cancelAnimationFrame","getDirection","getComputedStyle","direction","hidden","allTabs","length","linkPanels","tabs","tab","panel","nextElementSibling","tagName","toLowerCase","console","error","allPanels","panelForTab","panelId","firstTab","find","lastTab","i","prevTab","newIdx","findIndex","matches","nextTab","reset","panels","setSelectedTabOnSlotChange","setSelectedTab","altKey","includes","orientation","key","focus","selectTab","preventDefault","closest","scrollButton","sign","contains","offsetLeft","scrollLeft","scrollTo","left","selectTabByIndex","index","selectTabById","oldTab","t","scrollIntoView","inline","block","ATabGroup","ATab","ATabPanel"],"version":3,"file":"a-tab-group.js.map"}