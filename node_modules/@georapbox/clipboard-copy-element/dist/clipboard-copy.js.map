{"mappings":"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","sources":["<anon>","src/clipboard-copy.js"],"sourcesContent":["const $a4c1285108bf4a9d$var$COMPONENT_NAME = \"clipboard-copy\";\nconst $a4c1285108bf4a9d$var$DEFAULT_FEEDBACK_DURATION = 1000;\nconst $a4c1285108bf4a9d$var$SUCCESS_STATUS = \"success\";\nconst $a4c1285108bf4a9d$var$ERROR_STATUS = \"error\";\nconst $a4c1285108bf4a9d$var$template = document.createElement(\"template\");\n$a4c1285108bf4a9d$var$template.innerHTML = /* html */ `\n  <style>\n    :host([hidden]),\n    [hidden],\n    ::slotted([hidden]) {\n      display: none !important;\n    }\n  </style>\n\n  <button type=\"button\" part=\"button\">\n    <slot name=\"copy\">Copy</slot>\n    <slot name=\"success\" hidden>Copied!</slot>\n    <slot name=\"error\" hidden>Error</slot>\n  </button>\n`;\n/**\n * A custom element for copying text to the clipboard.\n * @extends HTMLElement\n */ class $a4c1285108bf4a9d$export$ea3b71af1761ff40 extends HTMLElement {\n    #timeout = null;\n    #buttonEl;\n    #copySlot;\n    #successSlot;\n    #errorSlot;\n    constructor(){\n        super();\n        if (!this.shadowRoot) {\n            this.attachShadow({\n                mode: \"open\"\n            });\n            this.shadowRoot.appendChild($a4c1285108bf4a9d$var$template.content.cloneNode(true));\n        }\n        this.#buttonEl = this.shadowRoot.querySelector(\"button\");\n        this.#copySlot = this.shadowRoot.querySelector('slot[name=\"copy\"]');\n        this.#successSlot = this.shadowRoot.querySelector('slot[name=\"success\"]');\n        this.#errorSlot = this.shadowRoot.querySelector('slot[name=\"error\"]');\n    }\n    static get observedAttributes() {\n        return [\n            \"disabled\"\n        ];\n    }\n    connectedCallback() {\n        this.#upgradeProperty(\"value\");\n        this.#upgradeProperty(\"from\");\n        this.#upgradeProperty(\"disabled\");\n        this.#upgradeProperty(\"feedbackDuration\");\n        this.#buttonEl.addEventListener(\"click\", this.#handleClick);\n    }\n    disconnectedCallback() {\n        this.#buttonEl.removeEventListener(\"click\", this.#handleClick);\n        // `disconnectedCallback` is also called when the element is moved to a different document,\n        // via `Document: adoptNode()` method, therefore we reset the component to its initial state.\n        this.#forceResetStatus();\n    }\n    attributeChangedCallback(name) {\n        if (name === \"disabled\") {\n            this.#buttonEl.disabled = this.disabled;\n            this.#buttonEl.setAttribute(\"aria-disabled\", this.disabled.toString());\n            if (this.#buttonEl.part.contains(\"button\")) this.#buttonEl.part.toggle(\"button--disabled\", this.disabled);\n        }\n    }\n    /**\n   * Getter for the value to copy.\n   * @returns {string | null}\n   */ get value() {\n        return this.getAttribute(\"value\");\n    }\n    /**\n   * Setter for the value to copy.\n   * @param {string} value - The value to copy.\n   */ set value(value) {\n        this.setAttribute(\"value\", value);\n    }\n    /**\n   * Getter for the CSS selector of the element to copy from.\n   * @returns {string | null}\n   */ get from() {\n        return this.getAttribute(\"from\");\n    }\n    /**\n   * Setter for the CSS selector of the element to copy from.\n   * @param {string} value - The value of the CSS selector.\n   */ set from(value) {\n        this.setAttribute(\"from\", value);\n    }\n    /**\n   * Getter for the disabled state.\n   */ get disabled() {\n        return this.hasAttribute(\"disabled\");\n    }\n    /**\n   * Setter for the disabled state.\n   * @param {boolean} value - The value of the disabled state.\n   */ set disabled(value) {\n        if (value) this.setAttribute(\"disabled\", \"\");\n        else this.removeAttribute(\"disabled\");\n    }\n    /**\n   * Getter for the duration for displaying the success or error status.\n   * If the value is not a number, the default value is used.\n   * @returns {number}\n   */ get feedbackDuration() {\n        return Number(this.getAttribute(\"feedback-duration\")) || $a4c1285108bf4a9d$var$DEFAULT_FEEDBACK_DURATION;\n    }\n    /**\n   * Setter for the duration for displaying the success or error status.\n   * @param {number} value - The value of the duration.\n   */ set feedbackDuration(value) {\n        this.setAttribute(\"feedback-duration\", value);\n    }\n    /**\n   * Copies the value to the clipboard and handles success or error states.\n   */ async #copy() {\n        if (!this.value && !this.from) return;\n        try {\n            let copyValue = \"\";\n            if (this.value) copyValue = this.value;\n            else if (this.from) {\n                const root = \"getRootNode\" in Element.prototype ? this.#buttonEl.getRootNode({\n                    composed: true\n                }) : this.#buttonEl.ownerDocument;\n                if (!root || !(root instanceof Document || root instanceof ShadowRoot)) return;\n                const element = root.querySelector(this.from);\n                if (!element) return;\n                if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) copyValue = element.value;\n                else if (element instanceof HTMLAnchorElement && element.hasAttribute(\"href\")) copyValue = element.href;\n                else copyValue = element.textContent;\n            }\n            await navigator.clipboard.writeText(copyValue);\n            this.#showStatus($a4c1285108bf4a9d$var$SUCCESS_STATUS);\n            this.dispatchEvent(new CustomEvent(`${$a4c1285108bf4a9d$var$COMPONENT_NAME}-success`, {\n                bubbles: true,\n                composed: true,\n                detail: {\n                    value: copyValue\n                }\n            }));\n        } catch (error) {\n            this.#showStatus($a4c1285108bf4a9d$var$ERROR_STATUS);\n            this.dispatchEvent(new CustomEvent(`${$a4c1285108bf4a9d$var$COMPONENT_NAME}-error`, {\n                bubbles: true,\n                composed: true,\n                detail: {\n                    error: error\n                }\n            }));\n        }\n    }\n    /**\n   * Handles the button click event.\n   * @param {MouseEvent} evt - The click event.\n   */ #handleClick = (evt)=>{\n        evt.preventDefault();\n        if (this.disabled || this.#timeout) return;\n        this.#copy();\n    };\n    /**\n   * Displays the success or error status.\n   * @param {string} status - The status to display.\n   */ #showStatus(status) {\n        this.#copySlot.hidden = true;\n        this.#successSlot.hidden = status !== $a4c1285108bf4a9d$var$SUCCESS_STATUS;\n        this.#errorSlot.hidden = status !== $a4c1285108bf4a9d$var$ERROR_STATUS;\n        this.#buttonEl.part.remove(\"button--success\");\n        this.#buttonEl.part.remove(\"button--error\");\n        this.#buttonEl.part.add(`button--${status}`);\n        this.#timeout && clearTimeout(this.#timeout);\n        this.#timeout = setTimeout(()=>{\n            this.#copySlot.hidden = false;\n            this.#successSlot.hidden = true;\n            this.#errorSlot.hidden = true;\n            this.#buttonEl.part.remove(`button--${status}`);\n            this.#timeout = null;\n        }, this.feedbackDuration);\n    }\n    /**\n   * Resets the status to the initial state.\n   * Clears the feedback timeout, hides the success or error slots and shows the copy slot.\n   */ #forceResetStatus() {\n        this.#timeout && clearTimeout(this.#timeout);\n        this.#timeout = null;\n        this.#copySlot.hidden = false;\n        this.#successSlot.hidden = true;\n        this.#errorSlot.hidden = true;\n        this.#buttonEl.part.remove(\"button--success\");\n        this.#buttonEl.part.remove(\"button--error\");\n    }\n    /**\n   * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n   * This is to safe guard against cases where, for instance, a framework may have added the element\n   * to the page and set a value on one of its properties, but lazy loaded its definition.\n   * Without this guard, the upgraded element would miss that property and the instance property\n   * would prevent the class property setter from ever being called.\n   * @param {string} prop - The property name.\n   */ #upgradeProperty(prop) {\n        if (Object.prototype.hasOwnProperty.call(this, prop)) {\n            const value = this[prop];\n            delete this[prop];\n            this[prop] = value;\n        }\n    }\n    /**\n   * Registers the custom element to custom elements registry.\n   * @param {string} [elementName] - The name of the custom element.\n   */ static defineCustomElement(elementName = $a4c1285108bf4a9d$var$COMPONENT_NAME) {\n        if (typeof window !== \"undefined\" && !window.customElements.get(elementName)) window.customElements.define(elementName, $a4c1285108bf4a9d$export$ea3b71af1761ff40);\n    }\n}\n\n\nexport {$a4c1285108bf4a9d$export$ea3b71af1761ff40 as ClipboardCopy};\n//# sourceMappingURL=clipboard-copy.js.map\n","const COMPONENT_NAME = 'clipboard-copy';\nconst DEFAULT_FEEDBACK_DURATION = 1000;\nconst SUCCESS_STATUS = 'success';\nconst ERROR_STATUS = 'error';\nconst template = document.createElement('template');\n\ntemplate.innerHTML = /* html */`\n  <style>\n    :host([hidden]),\n    [hidden],\n    ::slotted([hidden]) {\n      display: none !important;\n    }\n  </style>\n\n  <button type=\"button\" part=\"button\">\n    <slot name=\"copy\">Copy</slot>\n    <slot name=\"success\" hidden>Copied!</slot>\n    <slot name=\"error\" hidden>Error</slot>\n  </button>\n`;\n\n/**\n * A custom element for copying text to the clipboard.\n * @extends HTMLElement\n */\nclass ClipboardCopy extends HTMLElement {\n  #timeout = null;\n  #buttonEl;\n  #copySlot;\n  #successSlot;\n  #errorSlot;\n\n  constructor() {\n    super();\n\n    if (!this.shadowRoot) {\n      this.attachShadow({ mode: 'open' });\n      this.shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    this.#buttonEl = this.shadowRoot.querySelector('button');\n    this.#copySlot = this.shadowRoot.querySelector('slot[name=\"copy\"]');\n    this.#successSlot = this.shadowRoot.querySelector('slot[name=\"success\"]');\n    this.#errorSlot = this.shadowRoot.querySelector('slot[name=\"error\"]');\n  }\n\n  static get observedAttributes() {\n    return ['disabled'];\n  }\n\n  connectedCallback() {\n    this.#upgradeProperty('value');\n    this.#upgradeProperty('from');\n    this.#upgradeProperty('disabled');\n    this.#upgradeProperty('feedbackDuration');\n\n    this.#buttonEl.addEventListener('click', this.#handleClick);\n  }\n\n  disconnectedCallback() {\n    this.#buttonEl.removeEventListener('click', this.#handleClick);\n\n    // `disconnectedCallback` is also called when the element is moved to a different document,\n    // via `Document: adoptNode()` method, therefore we reset the component to its initial state.\n    this.#forceResetStatus();\n  }\n\n  attributeChangedCallback(name) {\n    if (name === 'disabled') {\n      this.#buttonEl.disabled = this.disabled;\n      this.#buttonEl.setAttribute('aria-disabled', this.disabled.toString());\n\n      if (this.#buttonEl.part.contains('button')) {\n        this.#buttonEl.part.toggle('button--disabled', this.disabled);\n      }\n    }\n  }\n\n  /**\n   * Getter for the value to copy.\n   * @returns {string | null}\n   */\n  get value() {\n    return this.getAttribute('value');\n  }\n\n  /**\n   * Setter for the value to copy.\n   * @param {string} value - The value to copy.\n   */\n  set value(value) {\n    this.setAttribute('value', value);\n  }\n\n  /**\n   * Getter for the CSS selector of the element to copy from.\n   * @returns {string | null}\n   */\n  get from() {\n    return this.getAttribute('from');\n  }\n\n  /**\n   * Setter for the CSS selector of the element to copy from.\n   * @param {string} value - The value of the CSS selector.\n   */\n  set from(value) {\n    this.setAttribute('from', value);\n  }\n\n  /**\n   * Getter for the disabled state.\n   */\n  get disabled() {\n    return this.hasAttribute('disabled');\n  }\n\n  /**\n   * Setter for the disabled state.\n   * @param {boolean} value - The value of the disabled state.\n   */\n  set disabled(value) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  /**\n   * Getter for the duration for displaying the success or error status.\n   * If the value is not a number, the default value is used.\n   * @returns {number}\n   */\n  get feedbackDuration() {\n    return Number(this.getAttribute('feedback-duration')) || DEFAULT_FEEDBACK_DURATION;\n  }\n\n  /**\n   * Setter for the duration for displaying the success or error status.\n   * @param {number} value - The value of the duration.\n   */\n  set feedbackDuration(value) {\n    this.setAttribute('feedback-duration', value);\n  }\n\n  /**\n   * Copies the value to the clipboard and handles success or error states.\n   */\n  async #copy() {\n    if (!this.value && !this.from) {\n      return;\n    }\n\n    try {\n      let copyValue = '';\n\n      if (this.value) {\n        copyValue = this.value;\n      } else if (this.from) {\n        const root = 'getRootNode' in Element.prototype\n          ? this.#buttonEl.getRootNode({ composed: true })\n          : this.#buttonEl.ownerDocument;\n\n        if (!root || !(root instanceof Document || root instanceof ShadowRoot)) {\n          return;\n        }\n\n        const element = root.querySelector(this.from);\n\n        if (!element) {\n          return;\n        }\n\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n          copyValue = element.value;\n        } else if (element instanceof HTMLAnchorElement && element.hasAttribute('href')) {\n          copyValue = element.href;\n        } else {\n          copyValue = element.textContent;\n        }\n      }\n\n      await navigator.clipboard.writeText(copyValue);\n\n      this.#showStatus(SUCCESS_STATUS);\n\n      this.dispatchEvent(new CustomEvent(`${COMPONENT_NAME}-success`, {\n        bubbles: true,\n        composed: true,\n        detail: { value: copyValue }\n      }));\n    } catch (error) {\n      this.#showStatus(ERROR_STATUS);\n\n      this.dispatchEvent(new CustomEvent(`${COMPONENT_NAME}-error`, {\n        bubbles: true,\n        composed: true,\n        detail: { error }\n      }));\n    }\n  }\n\n  /**\n   * Handles the button click event.\n   * @param {MouseEvent} evt - The click event.\n   */\n  #handleClick = evt => {\n    evt.preventDefault();\n\n    if (this.disabled || this.#timeout) {\n      return;\n    }\n\n    this.#copy();\n  };\n\n  /**\n   * Displays the success or error status.\n   * @param {string} status - The status to display.\n   */\n  #showStatus(status) {\n    this.#copySlot.hidden = true;\n    this.#successSlot.hidden = status !== SUCCESS_STATUS;\n    this.#errorSlot.hidden = status !== ERROR_STATUS;\n\n    this.#buttonEl.part.remove('button--success');\n    this.#buttonEl.part.remove('button--error');\n    this.#buttonEl.part.add(`button--${status}`);\n\n    this.#timeout && clearTimeout(this.#timeout);\n\n    this.#timeout = setTimeout(() => {\n      this.#copySlot.hidden = false;\n      this.#successSlot.hidden = true;\n      this.#errorSlot.hidden = true;\n\n      this.#buttonEl.part.remove(`button--${status}`);\n\n      this.#timeout = null;\n    }, this.feedbackDuration);\n  }\n\n  /**\n   * Resets the status to the initial state.\n   * Clears the feedback timeout, hides the success or error slots and shows the copy slot.\n   */\n  #forceResetStatus() {\n    this.#timeout && clearTimeout(this.#timeout);\n    this.#timeout = null;\n\n    this.#copySlot.hidden = false;\n    this.#successSlot.hidden = true;\n    this.#errorSlot.hidden = true;\n\n    this.#buttonEl.part.remove('button--success');\n    this.#buttonEl.part.remove('button--error');\n  }\n\n  /**\n   * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n   * This is to safe guard against cases where, for instance, a framework may have added the element\n   * to the page and set a value on one of its properties, but lazy loaded its definition.\n   * Without this guard, the upgraded element would miss that property and the instance property\n   * would prevent the class property setter from ever being called.\n   * @param {string} prop - The property name.\n   */\n  #upgradeProperty(prop) {\n    if (Object.prototype.hasOwnProperty.call(this, prop)) {\n      const value = this[prop];\n      delete this[prop];\n      this[prop] = value;\n    }\n  }\n\n  /**\n   * Registers the custom element to custom elements registry.\n   * @param {string} [elementName] - The name of the custom element.\n   */\n  static defineCustomElement(elementName = COMPONENT_NAME) {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, ClipboardCopy);\n    }\n  }\n}\n\nexport { ClipboardCopy };\n"],"names":["$a4c1285108bf4a9d$var$COMPONENT_NAME","$a4c1285108bf4a9d$var$SUCCESS_STATUS","$a4c1285108bf4a9d$var$ERROR_STATUS","$a4c1285108bf4a9d$var$template","document","createElement","innerHTML","$a4c1285108bf4a9d$export$ea3b71af1761ff40","HTMLElement","timeout","buttonEl","copySlot","successSlot","errorSlot","constructor","shadowRoot","attachShadow","mode","appendChild","content","cloneNode","querySelector","observedAttributes","connectedCallback","upgradeProperty","addEventListener","handleClick","disconnectedCallback","removeEventListener","forceResetStatus","attributeChangedCallback","name","disabled","setAttribute","toString","part","contains","toggle","value","getAttribute","from","hasAttribute","removeAttribute","feedbackDuration","Number","copy","copyValue","root","Element","prototype","getRootNode","composed","ownerDocument","Document","ShadowRoot","element","HTMLInputElement","HTMLTextAreaElement","HTMLAnchorElement","href","textContent","navigator","clipboard","writeText","showStatus","dispatchEvent","CustomEvent","bubbles","detail","error","evt","preventDefault","status","hidden","remove","add","clearTimeout","setTimeout","prop","Object","hasOwnProperty","call","defineCustomElement","elementName","window","customElements","get","define","ClipboardCopy"],"version":3,"file":"clipboard-copy.js.map"}